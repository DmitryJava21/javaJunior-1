Index: src/lesson7/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson7/Student.java b/src/lesson7/Student.java
new file mode 100644
--- /dev/null	(date 1621699539966)
+++ b/src/lesson7/Student.java	(date 1621699539966)
@@ -0,0 +1,7 @@
+package lesson7;
+
+public class Student {
+    public void printPerimetrTriangle (int a, int b, int c) {
+        System.out.println(a + b + c);
+    }
+}
Index: src/lesson7/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson7/Main2.java b/src/lesson7/Main2.java
new file mode 100644
--- /dev/null	(date 1621699689229)
+++ b/src/lesson7/Main2.java	(date 1621699689229)
@@ -0,0 +1,11 @@
+package lesson7;
+
+public class Main2 {
+    public static void main(String[] args) {
+        Student student = new Student();
+        student.printPerimetrTriangle(3, 6, 20);
+
+        Excellent excellent = new Excellent();
+        excellent.printPerimetrTriangle(3, 6, 20);
+    }
+}
Index: src/homework/Utils6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Utils6.java b/src/homework/Utils6.java
new file mode 100644
--- /dev/null	(date 1621604807515)
+++ b/src/homework/Utils6.java	(date 1621604807515)
@@ -0,0 +1,69 @@
+package homework;
+
+public class Utils6 {
+    public static void printAreaOfATriangle(int a, int b, int c) {
+
+        if (a + b > c || a + c > b || b + c > a) { //проверка на треугольник
+            double perimeter = (double) (a + b + c) / 2.0; //периметр :)
+            double area = Math.sqrt(perimeter * (perimeter - a) * (perimeter - b) * (perimeter - c));
+            System.out.println("Площадь теругольника:" + area);
+        } else {
+            System.out.println("Нет такого треугольника!");
+        }
+        System.out.println();
+    }
+
+    public static void printAllEvenNumbers(int... arr) { /// ... - сама идея подсказала
+        System.out.print("Целые числа: ");
+        for (int i = 0; i < arr.length; i++) { //массив
+            if (arr[i] % 2 == 0) //выбираем целое число
+                System.out.print(" " + arr[i]); //печатаем
+        }
+        System.out.println();
+        System.out.println();
+    }
+
+    public static void printSumOfFractions(int numerator1, int numerator2, int denominator1, int denominator2) {
+        // Что бы не писать постоянно текст...
+        String printJob = "Сумма дробей:\n";
+        // привести дроби к общему множителю
+        // У нас 3 и 4. Общий у них должен быть 12. Т.е. 3*4
+        // Можно было меньше переменных сделать, но я так сделал, что бы было видно решение, это же больше математическое :)
+        if (numerator1 < 0 || numerator2 < 0 || denominator1 < 0 || denominator2 < 0) {
+            System.out.println("Извини, но можно ввести только положительные цисла");
+        } else if (denominator1 == denominator2) {
+            int numerator = numerator1 + numerator2;
+            System.out.println(printJob + numerator + "\n-\n" + denominator1);
+        } else if (denominator1 > denominator2 && denominator1 % denominator2 == 0) {
+            // Допустим у нас 2\6 и 1\2, то приводим к 2\6 и 3\6
+            int factor = denominator1 / denominator2;
+            int newNumerator2 = factor * numerator2;
+            int numerator = numerator1 + newNumerator2;
+            System.out.println(printJob + numerator + "\n-\n" + denominator1);
+        } else if (denominator1 > denominator2) {
+            // допустим у нас 2\5 и 1\2, то приводим к 4\10 и 5\10
+            // Можно было в предыдущем else if сделать, но я решил разделить, так сейчас проще смотреть
+            int factor = denominator1 * denominator2; //10
+            int factor1 = factor / denominator1; //2
+            int factor2 = factor / denominator2; //5
+            int newNumerator1 = factor1 * numerator1; //2*2
+            int newNumerator2 = factor2 * numerator2; //5*1
+            System.out.println(printJob + (newNumerator1 + newNumerator2) + "\n-\n" + factor);
+        } else if (denominator2 > denominator1 && denominator2 % denominator1 == 0) {
+            // Допустим у нас 1\2 и 2\6, то приводим к 3\6 и 2\6
+            int factor = denominator2 / denominator1;
+            int newNumerator1 = factor * numerator1;
+            int numerator = numerator2 + newNumerator1;
+            System.out.println(printJob + numerator + "\n-\n" + denominator2);
+        } else {
+            // Допустим у нас 1\2 и 2\5, то приводим к 5\10 и 4\10. Поидее не может быть других вариантов
+            int factor = denominator2 * denominator1; //10
+            int factor1 = factor / denominator1; // 5
+            int factor2 = factor / denominator2; //2
+            int newNumerator1 = factor1 * numerator1; //5*1
+            int newNumerator2 = factor2 * numerator2; //5*2
+            System.out.println(printJob + (newNumerator1 + newNumerator2) + "\n-\n" + factor);
+        }
+
+    }
+}
Index: src/lesson7/Tour.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson7/Tour.java b/src/lesson7/Tour.java
new file mode 100644
--- /dev/null	(date 1621702442727)
+++ b/src/lesson7/Tour.java	(date 1621702442727)
@@ -0,0 +1,27 @@
+package lesson7;
+
+public class Tour {
+    private String name;
+    private int day;
+    private int cost;
+    private String[] countries = new String[10];
+    private String type;
+    private int stars;
+
+    public Tour() {
+        // Надо делать, даже если не используется. Если не сделать, то не будет наследоваться
+    }
+
+    public Tour(String name, int day, int cost, String type, int stars) {
+        this.name = name;
+        this.day = day;
+        this.cost = cost;
+        this.type = type;
+        this.stars = stars;
+    }
+
+    public void printInfo() {
+        System.out.printf("Тур: %s, %d дней, на %s, " +
+                "за %d рублей, в %d звезды отель \n", this.name, this.day, this.type, this.cost, this.stars);
+    }
+}
Index: src/homework/Square.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Square.java b/src/homework/Square.java
new file mode 100644
--- /dev/null	(date 1621855261742)
+++ b/src/homework/Square.java	(date 1621855261742)
@@ -0,0 +1,18 @@
+package homework;
+
+public class Square {
+    private int sideSquare;
+
+
+    public Square() {
+
+    }
+
+    public Square(int sideSquare) {
+        this.sideSquare = sideSquare;
+    }
+
+    public void printDataSquare() {
+        System.out.println("Сторона квадрата: " + this.sideSquare + "\nПлощадь квадрата: " + this.sideSquare * this.sideSquare + "\nПериметр квадрата: " + this.sideSquare * 4 + "\n");
+    }
+}
Index: src/homework/Rectangle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Rectangle.java b/src/homework/Rectangle.java
new file mode 100644
--- /dev/null	(date 1621853123108)
+++ b/src/homework/Rectangle.java	(date 1621853123108)
@@ -0,0 +1,22 @@
+package homework;
+// Прямоугольник
+public class Rectangle {
+    private int sideA;
+    private int sideB;
+
+    public Rectangle() {
+
+    }
+    public Rectangle(int sideA, int sideB) {
+        this.sideA=sideA;
+        this.sideB=sideB;
+    }
+
+    public void printDataRectangle() {
+        if (sideB!=sideA) {
+            int perimeter = 2*(sideA+sideB);
+            System.out.println("Стороны прямоугольника: " + sideA + " и " + sideB + "\nПлощадь прямоугольника: " + sideB*sideA + "\nПериметр треугольника: " + perimeter + "\n");
+        } else
+            System.out.println("Это не прямоугольник, а квадрат :)" + "\n");
+    }
+}
Index: src/homework/Circle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Circle.java b/src/homework/Circle.java
new file mode 100644
--- /dev/null	(date 1621855261737)
+++ b/src/homework/Circle.java	(date 1621855261737)
@@ -0,0 +1,21 @@
+package homework;
+
+public class Circle {
+    private int radiusLenght;
+
+    public Circle() {
+
+    }
+
+    public Circle(int radiusLenght) {
+        this.radiusLenght = radiusLenght;
+    }
+
+    public void printDataCircle() {
+        double pi = 3.1415926535;
+        double circumference = 2 * pi * this.radiusLenght;
+        double areaCircle = pi * (this.radiusLenght * this.radiusLenght);
+        System.out.println("Длина окружности круга: " + circumference + "\nПлощадь круга: " + areaCircle);
+
+    }
+}
Index: src/homework/Lesson7.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Lesson7.java b/src/homework/Lesson7.java
new file mode 100644
--- /dev/null	(date 1621853772594)
+++ b/src/homework/Lesson7.java	(date 1621853772594)
@@ -0,0 +1,18 @@
+package homework;
+
+public class Lesson7 {
+    public static void main(String[] args) {
+        //Квадрат
+        Square square = new Square(10);
+        square.printDataSquare();
+        //Треугольник
+        Triangle triangle = new Triangle(3, 2, 3);
+        triangle.printDataTriangle();
+        //Прямоугольник
+        Rectangle rectangle = new Rectangle(3,2);
+        rectangle.printDataRectangle();
+        //Круг
+        Circle circle = new Circle(3);
+        circle.printDataCircle();
+    }
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1620125971015)
+++ b/.idea/misc.xml	(date 1620125971015)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8 (2)" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/lesson7/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson7/Main.java b/src/lesson7/Main.java
new file mode 100644
--- /dev/null	(date 1621698730828)
+++ b/src/lesson7/Main.java	(date 1621698730828)
@@ -0,0 +1,32 @@
+package lesson7;
+
+public class Main {
+    public static void main(String[] args) {
+        Product teapot1 = new Product();
+        Product teapot2 = new Product();
+
+        teapot1.setId(1);
+        teapot2.setId(2);
+
+        teapot1.setName("Redmont N1");
+        teapot2.setName("Redmont N2");
+
+        teapot1.setFullPrice(2500);
+        teapot2.setFullPrice(3000);
+
+        teapot1.setSalePrice(1499);
+        teapot2.setSalePrice(1999);
+
+        int idTeapot = teapot1.getId();
+        System.out.println(idTeapot);
+
+        Pen pen1 = new Pen();
+        pen1.setId(3);
+        pen1.setName("Ручка красная");
+        pen1.setFullPrice(1000);
+        pen1.setSalePrice(33);
+
+        int idPen = pen1.getId();
+        System.out.println(idPen);
+    }
+}
Index: src/lesson7/Main3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson7/Main3.java b/src/lesson7/Main3.java
new file mode 100644
--- /dev/null	(date 1621702442730)
+++ b/src/lesson7/Main3.java	(date 1621702442730)
@@ -0,0 +1,22 @@
+package lesson7;
+
+public class Main3 {
+    public static void main(String[] args) {
+        Tour tour1 = new Tour("Восток", 14, 140000, "Самолёт", 5);
+        Tour tour2 = new Tour("Запад", 10, 100000, "Поезд", 4);
+        Tour tour3 = new Tour("Север", 7, 7000, "Поезд", 3);
+        Tour tour4 = new Tour("Юг", 10, 100000, "Поезд", 5);
+        Tour tour5 = new Tour("Центр", 12, 120000, "Самолёт", 4);
+
+        Tour[] tours = new Tour[5];
+        tours[0] = tour1;
+        tours[1] = tour2;
+        tours[2] = tour3;
+        tours[3] = tour4;
+        tours[4] = tour5;
+
+        for (int i = 0; i < tours.length; i++) {
+            tours[i].printInfo();
+        }
+    }
+}
Index: src/lesson7/Excellent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson7/Excellent.java b/src/lesson7/Excellent.java
new file mode 100644
--- /dev/null	(date 1621700213023)
+++ b/src/lesson7/Excellent.java	(date 1621700213023)
@@ -0,0 +1,17 @@
+package lesson7;
+
+public class Excellent extends Student{
+    @Override
+    public void printPerimetrTriangle(int a, int b, int c) {
+//        super.printPerimetrTriangle(a, b, c); // super - указывает на основое_
+
+        if (a + b > c || a + c > b || b + c > a) { //проверка на треугольник
+            double perimeter = (double) (a + b + c) / 2.0; //периметр :)
+//            double area = Math.sqrt(perimeter * (perimeter - a) * (perimeter - b) * (perimeter - c));
+            System.out.println("Периметр теругольника:" + perimeter);
+        } else {
+            System.out.println("Нет такого треугольника!");
+        }
+        System.out.println();
+    }
+}
Index: src/lesson7/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson7/Product.java b/src/lesson7/Product.java
new file mode 100644
--- /dev/null	(date 1621698384794)
+++ b/src/lesson7/Product.java	(date 1621698384794)
@@ -0,0 +1,30 @@
+package lesson7;
+
+public class Product {
+    //1 - объявлем переменные (характеристики данного типа)
+    private String name; //private - нельзя обращаться в других методах
+    private int id;
+    private int fullPrice;
+    private int salePrice;
+
+    public void setId(int id) { //set - установить
+        this.id = id;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setFullPrice(int fullPrice) {
+        this.fullPrice = fullPrice;
+    }
+
+    public void setSalePrice(int salePrice) {
+        this.salePrice = salePrice;
+    }
+
+    public int getId() { // get - получить информация
+        //В данном случае в скобках ничего
+        return this.id;
+    }
+}
Index: src/homework/Triangle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Triangle.java b/src/homework/Triangle.java
new file mode 100644
--- /dev/null	(date 1621852577953)
+++ b/src/homework/Triangle.java	(date 1621852577953)
@@ -0,0 +1,27 @@
+package homework;
+
+// Треугольник
+public class Triangle {
+    private int sideA;
+    private int sideB;
+    private int sideC;
+
+    public Triangle() {
+
+    }
+
+    public Triangle(int sideA, int sideB, int sideC) {
+        this.sideA = sideA;
+        this.sideB = sideB;
+        this.sideC = sideC;
+    }
+
+    public void printDataTriangle() {
+        if (sideA+sideB>=sideC && sideB+sideC>=sideA && sideA+sideC>=sideB) {
+            double perimeter = (double) (sideA + sideB + sideC) / 2.0;
+            double area = Math.sqrt(perimeter * (perimeter - sideA) * (perimeter - sideB) * (perimeter - sideC));
+            System.out.println("Стороны треугольника: " + sideA + ", " + sideB + " и " + sideC + "\nПериметр треугольника: " + perimeter + "\nПлощадь треугольника " + area + "\n");
+        } else
+            System.out.println("Нет такого треугольника :(" + "\n");
+    }
+}
Index: javaJunior-1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/javaJunior-1.iml b/javaJunior-1.iml
new file mode 100644
--- /dev/null	(date 1620125970963)
+++ b/javaJunior-1.iml	(date 1620125970963)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: src/lesson8/Circle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson8/Circle.java b/src/lesson8/Circle.java
new file mode 100644
--- /dev/null	(date 1621962581733)
+++ b/src/lesson8/Circle.java	(date 1621962581733)
@@ -0,0 +1,20 @@
+package lesson8;
+
+public class Circle {
+    private double radius;
+
+    public Circle() {
+    }
+
+    public Circle(double radius) {
+        this.radius = radius;
+    }
+
+    public double getRadius() {
+        return radius;
+    }
+
+    public void setRadius(double radius) {
+        this.radius = radius;
+    }
+}
Index: src/lesson8/Oval.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson8/Oval.java b/src/lesson8/Oval.java
new file mode 100644
--- /dev/null	(date 1621963464671)
+++ b/src/lesson8/Oval.java	(date 1621963464671)
@@ -0,0 +1,13 @@
+package lesson8;
+
+public class Oval extends Circle{
+    private double radius2;
+
+    public Oval() {
+    }
+
+    public Oval(double radius1, double radius2) {
+        super(radius1);
+        this.radius2 = radius2;
+    }
+}
Index: src/homework/Lesson5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Lesson5.java b/src/homework/Lesson5.java
new file mode 100644
--- /dev/null	(date 1621597053038)
+++ b/src/homework/Lesson5.java	(date 1621597053038)
@@ -0,0 +1,68 @@
+package homework;
+
+import java.util.concurrent.ThreadLocalRandom;
+
+public class Lesson5 {
+    public static void main(String[] args) {
+        int[][] arrNumbersOne = new int[7][7];
+        int[][] arrNumbersTwo = new int[6][6];
+        char[][] characterArray = new char[10][10];
+
+        System.out.println("Второй пример (Форматирование чуть не правильное)");
+        for (int i = 0; i <= 3; i++) {
+            for (int j = 0; j < arrNumbersOne.length; j++) {
+                if (i == 3) {
+                    System.out.print(arrNumbersOne[i][j] + "  ");
+                } else if (i==2 && j>1 && j<7) {
+                    System.out.print(arrNumbersOne[i][j] + "  ");
+                } else if (i==1 && j>2 && j<6) {
+                    System.out.print(arrNumbersOne[i][j] + "  ");
+                } else if (i==0 && j==4) {
+                    System.out.print(arrNumbersOne[i][j] + "  ");
+                } else {
+                    System.out.print("  ");
+                }
+            }
+            System.out.println();
+        }
+
+        System.out.println("\nТретий пример (Форматирование чуть не правильное)");
+        for (int i = 0; i <arrNumbersTwo.length; i++) {
+            for (int j = 0; j < arrNumbersTwo.length; j++) {
+                if (i == 2 || i==3) {
+                    System.out.print(arrNumbersTwo[i][j] + "  ");
+                } else if (j==2 || j==3) {
+                    System.out.print(arrNumbersTwo[i][j] + "  ");
+                } else if ((j==1 || j==4) && (i==1 || i==4)) {
+                    System.out.print(arrNumbersTwo[i][j] + "  ");
+                } else {
+                    System.out.print("  ");
+                }
+            }
+            System.out.println();
+        }
+
+        System.out.println("\nОсновное задание");
+        for (int i = 0; i < 10; i++) {
+            int randomRowX = ThreadLocalRandom.current().nextInt(0, characterArray.length);
+            int randomColumnX = ThreadLocalRandom.current().nextInt(0, characterArray[0].length);
+            characterArray[randomRowX][randomColumnX] = 'x';
+        }
+        for (int i = 0; i < 10; i++) {
+            int randomRowY = ThreadLocalRandom.current().nextInt(0, characterArray.length);
+            int randomColumnY = ThreadLocalRandom.current().nextInt(0, characterArray[0].length);
+            characterArray[randomRowY][randomColumnY] = 'y';
+        }
+
+        for (int i=0;i< characterArray.length;i++) {
+            for (int j=0;j<characterArray[i].length;j++) {
+                if (characterArray[i][j]=='y') {
+                    System.out.print("z  ");
+                } else {
+                    System.out.print(characterArray[i][j] + "  ");
+                }
+            }
+            System.out.println();
+        }
+    }
+}
Index: src/homework/Lesson6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Lesson6.java b/src/homework/Lesson6.java
new file mode 100644
--- /dev/null	(date 1621604490755)
+++ b/src/homework/Lesson6.java	(date 1621604490755)
@@ -0,0 +1,11 @@
+package homework;
+
+public class Lesson6 {
+    public static void main(String[] args) {
+        Utils6.printAreaOfATriangle(1, 3, 3);
+
+        Utils6.printAllEvenNumbers(1, 2, 3, 4, 5, 6, 7);
+
+        Utils6.printSumOfFractions(1,2,2,5);
+    }
+}
Index: src/homework/Lesson3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Lesson3.java b/src/homework/Lesson3.java
new file mode 100644
--- /dev/null	(date 1621597059237)
+++ b/src/homework/Lesson3.java	(date 1621597059237)
@@ -0,0 +1,61 @@
+package homework;
+
+public class Lesson3 {
+    public static void main(String[] args) {
+        int sum1b = 0;
+        int sum2a = 0;
+        int sum2b = 0;
+        String ling = "Java is the capital of Great Britain";
+        System.out.println("=== 1.а ===");
+        for (int i = 500; i < 1001; i++) {
+            if (i % 7 == 0 && i % 19 == 0) {
+                System.out.println(i);
+            }
+        }
+
+        System.out.println("\n\n=== 1.б ===");
+        for (int i = 50; i < 1001; i++) {
+            if (i % 7 == 0 && i % 19 == 0) {
+                sum1b = sum1b + i;
+            }
+        }
+        System.out.println(sum1b);
+
+        System.out.println("\n\n=== 1.в ===");
+        for (int i = 10; i < 31; i++) {
+            if (i<21 || i>24) {
+                System.out.println(i);
+            }
+        }
+
+        System.out.println("\n\n=== 1.д ===");
+        for (int i = 100;i>=90;i--) {
+            System.out.println(i);
+        }
+
+        System.out.println("\n\n=== 2.а ===");
+        for ( int i = 0; i < ling.length(); i++) {
+            if (ling.charAt(i)==' ') {
+                sum2a++;
+            }
+        }
+        System.out.println("Кол-во пробелов: " + sum2a);
+
+        System.out.println("\n\n=== 2.б ===");
+        for ( int i = 0; i < ling.length(); i++) {
+            //все возможные согласные. Надо было с Y давать, было бы еще и на логику (Программирование это же про логику?)
+            if (ling.charAt(i)=='b' || ling.charAt(i)=='c' || ling.charAt(i)=='d' || ling.charAt(i)=='f' || ling.charAt(i)=='g' || ling.charAt(i)=='h' || ling.charAt(i)=='j' || ling.charAt(i)=='k' || ling.charAt(i)=='l' || ling.charAt(i)=='m' || ling.charAt(i)=='n' || ling.charAt(i)=='p' || ling.charAt(i)=='q' || ling.charAt(i)=='r' || ling.charAt(i)=='s' || ling.charAt(i)=='t' || ling.charAt(i)=='v' || ling.charAt(i)=='w' || ling.charAt(i)=='x' || ling.charAt(i)=='y' || ling.charAt(i)=='z') {
+                sum2b++;
+            }
+        }
+        System.out.println("Кол-во согласные: " + sum2b);
+
+        System.out.println("\n\n=== 2.в ===");
+        for ( int i = ling.length()-1; i >=0; i--) {
+            //все возможные гласные
+            if (ling.charAt(i)=='a' || ling.charAt(i)=='e' || ling.charAt(i)=='i' || ling.charAt(i)=='o' || ling.charAt(i)=='u' || ling.charAt(i)=='y') {
+                System.out.println(ling.charAt(i));
+            }
+        }
+    }
+}
Index: src/homework/Lesson2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Lesson2.java b/src/homework/Lesson2.java
new file mode 100644
--- /dev/null	(date 1621597064062)
+++ b/src/homework/Lesson2.java	(date 1621597064062)
@@ -0,0 +1,42 @@
+package homework;
+
+import java.util.Scanner;
+
+public class Lesson2 {
+    public static void main(String[] args) {
+        Scanner scanner = new Scanner(System.in);
+        int age;
+
+        System.out.println("Введи свой возраст\nПример: 30");
+        age = scanner.nextInt();
+
+
+        if (age >= 2 && age <= 11) {
+            System.out.println("Вы ребенок!");
+        } else if (age == 12) {
+            System.out.println("Вы подросток");
+        } else if (age > 12 && age < 17) {
+            int from = (int) (Math.random() * (1 + 1)) + 1;
+            if (from == 1) {
+                System.out.println("Вы подросток");
+            } else {
+                System.out.println("Вы тинейджер");
+            }
+        } else if (age == 17) {
+            System.out.println("Вы тинейджер");
+        } else if (age > 17 && age <= 44) {
+            System.out.println("Вы молодой");
+        } else if (age > 44 && age <= 59) {
+            System.out.println("Вы среднего возраста");
+        } else if (age > 59 && age <= 74) {
+            System.out.println("Вы пожилой");
+        } else if (age > 74 && age <= 90) {
+            System.out.println("Вы старик");
+        } else if (age > 90 && age <= 109) {
+            System.out.println("Вы долгожитель");
+        } else {
+            System.out.println("Не ври. Начинай сначала и пиши свой реальный возраст");
+        }
+
+    }
+}
Index: src/homework/Lesson1and4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/Lesson1and4.java b/src/homework/Lesson1and4.java
new file mode 100644
--- /dev/null	(date 1621597068125)
+++ b/src/homework/Lesson1and4.java	(date 1621597068125)
@@ -0,0 +1,73 @@
+package homework;
+
+import java.util.Arrays;
+
+public class Lesson1and4 {
+
+    public static void main(String[] args) {
+        int[] numbers = {3, 5, 8, 3, 55, 4, 1, 65, 36, 98, 57};
+        String text = "Я буду учиться лучше";
+        String[] partsOfText = text.split(" ");
+        char[] symbolsFromText = text.toCharArray();
+        String numbersToString = Arrays.toString(numbers);
+        numbersToString = numbersToString.replaceAll("[^0-9 ]", "");
+        String[] partsOfNumbers = numbersToString.split(" ");
+        String result = "";
+        String ansiReset = "\033[0;0m";
+        String ansiBold = "\033[0;5m";
+        String ansiUnderline = "\033[0;4m";
+        String alphabat = "abcdefghijklmnopqrstuvwxyza";
+
+        System.out.print("Вывести на консоль через ячейку: ");
+        for (int i = 0; i < numbers.length; i = i + 2)
+            System.out.print(ansiUnderline + numbers[i] + ansiReset + " ");
+
+        System.out.print("\n\nВывести на консоль массив с обратной стороны: ");
+        for (int i = numbers.length - 1; i >= 0; i--)
+            System.out.print(ansiUnderline + numbers[i] + ansiReset + " ");
+
+        System.out.print("\n\nВывести на консоль те числа, которые содержат символ 5: ");
+        for (int i = 0; i < partsOfNumbers.length; i++) {
+            if (partsOfNumbers[i].startsWith("5") || partsOfNumbers[i].endsWith("5")) {
+                System.out.print(partsOfNumbers[i] + " ");
+            }
+        }
+
+        System.out.print("\n\nНапечатать на консоль каждое слово в отдельной строке:\n");
+        for (int i = 0; i < partsOfText.length; i++) {
+            if (i == 0)
+                System.out.println(ansiUnderline + partsOfText[i] + ansiReset + ansiBold + "\nне" + ansiReset);
+            else
+                System.out.println(ansiUnderline + partsOfText[i] + ansiReset);
+        }
+
+        System.out.print("\n\nНапечатать на консоль каждое слово в обратном порядке\n");
+        for (int i = symbolsFromText.length - 1; i >= 0; i--)
+            result += symbolsFromText[i];
+        String[] partsOfNewText = result.split(" ");
+        for (int i = partsOfNewText.length - 1; i >= 0; i--)
+            System.out.println(ansiUnderline + partsOfNewText[i] + ansiReset);
+
+        System.out.println("\n\n" + alphabat.charAt(4) + alphabat.charAt(0) + alphabat.charAt(18) + alphabat.charAt(24));
+
+        System.out.println("\n\nКомментарий: На сколько я понимаю, тут наверное правильнее было в каждом for использовать разные буквы, а не только одну i?");
+
+        System.out.println("\n\n\nА теперь задание с первого урока:");
+        double money = 1000;
+        double pricePizza = 230;
+        double amountPizza;
+        double priceGum = 26;
+        double amountGum;
+        double priceCande = 2.5;
+        double amountCande;
+        double myMoney;
+
+        amountPizza = money / pricePizza;
+        myMoney = money - (pricePizza * (int) amountPizza);
+        amountGum = myMoney / priceGum;
+        myMoney = myMoney - (priceGum * (int) amountGum);
+        amountCande = myMoney / priceCande;
+        myMoney = myMoney - (priceCande * (int) amountCande);
+        System.out.println("\nНа эти деньги мы можем купить:\n- " + (int) amountPizza + " пиццы\n- " + (int) amountGum + " жвачки\n- " + (int) amountCande + " конфет\nСдача с магазина: " + (int) myMoney + " рубля. Но можно поторговаться за конфетку ^_^");
+    }
+}
Index: src/lesson8/blackjack/Card.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson8/blackjack/Card.java b/src/lesson8/blackjack/Card.java
new file mode 100644
--- /dev/null	(date 1622135608729)
+++ b/src/lesson8/blackjack/Card.java	(date 1622135608729)
@@ -0,0 +1,33 @@
+package lesson8.blackjack;
+
+public class Card {
+    private String name;
+    private int value;
+
+    public Card() {
+    }
+
+    public Card(String name, int value) {
+        this.name = name;
+        this.value = value;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getValue() {
+        return value;
+    }
+
+    public void setValue(int value) {
+        this.value = value;
+    }
+    public void prinCard(){
+        System.out.println(name);
+    }
+}
Index: src/lesson8/blackjack/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson8/blackjack/Main.java b/src/lesson8/blackjack/Main.java
new file mode 100644
--- /dev/null	(date 1622140168254)
+++ b/src/lesson8/blackjack/Main.java	(date 1622140168254)
@@ -0,0 +1,20 @@
+package lesson8.blackjack;
+
+public class Main {
+    public static void main(String[] args) {
+        Dealer dealer = new Dealer();
+        Player player = new Player();
+
+        Game game = new Game();
+        game.addPlayerToGame(player);
+        game.addPlayerToGame(dealer);
+
+        game.addTwoCardsToPlayers();
+
+        game.addCardsTillNeed(player);
+        game.addCardsTillNeed(dealer);
+
+        game.printWinner(player, dealer);
+
+    }
+}
Index: src/lesson8/blackjack/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson8/blackjack/Player.java b/src/lesson8/blackjack/Player.java
new file mode 100644
--- /dev/null	(date 1622138832025)
+++ b/src/lesson8/blackjack/Player.java	(date 1622138832025)
@@ -0,0 +1,26 @@
+package lesson8.blackjack;
+
+import java.util.ArrayList;
+
+public class Player {
+    private String name;
+    private ArrayList<Card> hand = new ArrayList<>();
+
+    public void saveCardTohand(Card card) {
+        hand.add(card);
+    }
+
+    public void printCardsInHand() {
+        for (Card c : hand) {
+            c.prinCard();
+        }
+    }
+
+    public int countValueInHand() {
+        int sum = 0;
+        for (Card c : hand) {
+            sum = sum + c.getValue();
+        }
+        return sum;
+    }
+}
Index: src/lesson8/blackjack/Dealer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson8/blackjack/Dealer.java b/src/lesson8/blackjack/Dealer.java
new file mode 100644
--- /dev/null	(date 1621967986976)
+++ b/src/lesson8/blackjack/Dealer.java	(date 1621967986976)
@@ -0,0 +1,4 @@
+package lesson8.blackjack;
+
+public class Dealer extends Player{
+}
Index: src/lesson8/blackjack/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson8/blackjack/Game.java b/src/lesson8/blackjack/Game.java
new file mode 100644
--- /dev/null	(date 1622140803820)
+++ b/src/lesson8/blackjack/Game.java	(date 1622140803820)
@@ -0,0 +1,61 @@
+package lesson8.blackjack;
+
+import java.util.ArrayList;
+import java.util.Scanner;
+
+public class Game {
+    private Coloda coloda = new Coloda();
+    private ArrayList<Player> players = new ArrayList<>();
+
+    public void addPlayerToGame(Player player) {
+        players.add(player);
+    }
+
+    public void addTwoCardsToPlayers() {
+        for (Player p : players) {
+            Card randomCard = coloda.randomCard();
+            p.saveCardTohand(randomCard);
+
+            Card randomCard2 = coloda.randomCard();
+            p.saveCardTohand(randomCard2);
+        }
+    }
+
+    public void addCardsTillNeed(Player player) {
+        player.printCardsInHand();
+        Scanner scanner = new Scanner(System.in);
+        System.out.println("Need one more card?(yes/no)");
+        String answer = scanner.nextLine();
+        if (answer.equals("yes")) { //equals - сравнивание, аля ==
+            Card card = coloda.randomCard();
+            player.saveCardTohand(card);
+            addCardsTillNeed(player);
+        }
+    }
+
+    public void addCardsTillNeed(Dealer dealer) {
+        if (dealer.countValueInHand() < 18) {
+            Card card = coloda.randomCard();
+            dealer.saveCardTohand(card);
+            addCardsTillNeed(dealer);
+        }
+    }
+
+    public void printWinner(Player player, Dealer dealer) {
+        if (player.countValueInHand() > 21) {
+            System.out.println("Dealer won. Now your money is mine");
+            dealer.printCardsInHand();
+        } else if (dealer.countValueInHand() > 21 && player.countValueInHand() <= 21) {
+            System.out.println("Player won. Now your money is mine");
+            dealer.printCardsInHand();
+        } else if (player.countValueInHand() >= dealer.countValueInHand()) {
+            System.out.println("Player won. Now your money is mine");
+            dealer.printCardsInHand();
+        } else {
+            System.out.println("Dealer won. Now your money is mine");
+            dealer.printCardsInHand();
+        }
+
+
+    }
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1624472554199)
+++ b/.gitignore	(date 1624472554199)
@@ -0,0 +1,2 @@
+# Project exclude paths
+/out/
\ No newline at end of file
Index: src/lesson1/TwoProject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson1/TwoProject.java b/src/lesson1/TwoProject.java
new file mode 100644
--- /dev/null	(date 1620926391505)
+++ b/src/lesson1/TwoProject.java	(date 1620926391505)
@@ -0,0 +1,23 @@
+package lesson1;
+
+public class TwoProject {
+    public static void main(String[] args) {
+        int number = 98;
+        double roomWeight = 5.7;
+        double roomLength = 4;
+        double tableWeight = 2;
+        double tableLenght = 2.6;
+        double areaRoom = roomWeight*roomLength;
+        double areaTable = tableLenght*tableWeight;
+        int howManyTables = (int) (areaRoom / areaTable);
+        double spaceLeft = areaRoom - howManyTables * areaTable;
+
+        if (number % 2 == 0) {
+            System.out.println("Целое");
+        } else {
+            System.out.println("Не целое");
+        }
+
+        System.out.println("Столов поместится в комнате: " + howManyTables + "\nОстанется площади после " + howManyTables + " столов: " + spaceLeft);
+    }
+}
Index: src/lesson1/MyFistProject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson1/MyFistProject.java b/src/lesson1/MyFistProject.java
new file mode 100644
--- /dev/null	(date 1620126830136)
+++ b/src/lesson1/MyFistProject.java	(date 1620126830136)
@@ -0,0 +1,14 @@
+package lesson1;
+
+public class MyFistProject {
+
+    public static void main(String[] args) {
+        int a = 10;
+        int b = 7;
+        int c = 8;
+        int perimetr = a + b + c;
+        System.out.println(perimetr);
+    }
+
+
+}
\ No newline at end of file
Index: src/homework/lesson8/TelephoneUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/lesson8/TelephoneUtils.java b/src/homework/lesson8/TelephoneUtils.java
new file mode 100644
--- /dev/null	(date 1622545831069)
+++ b/src/homework/lesson8/TelephoneUtils.java	(date 1622545831069)
@@ -0,0 +1,20 @@
+package homework.lesson8;
+
+import java.util.ArrayList;
+
+public class TelephoneUtils {
+
+
+    public static void printAllPhonesByProduction(ArrayList<Telephone> phones, String manufacturers) {
+        for (int i=0;i< phones.size();i++) {
+            if (manufacturers.equals("Apple")) {
+//                System.out.println(phones);
+            }
+        }
+
+    }
+
+    //    public static void printTheBigestResolution(ArrayList<Telephone> model) {
+
+//    }
+}
Index: src/lesson10/interfaces/Krug.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/interfaces/Krug.java b/src/lesson10/interfaces/Krug.java
new file mode 100644
--- /dev/null	(date 1622572083689)
+++ b/src/lesson10/interfaces/Krug.java	(date 1622572083689)
@@ -0,0 +1,52 @@
+package lesson10.interfaces;
+
+import java.util.Objects;
+
+public class Krug implements Figura { //emplements добавить фигуру
+    private double radius;
+
+    public Krug() {
+    }
+
+    public Krug(double radius) {
+        this.radius = radius;
+    }
+
+    public double getRadius() {
+        return radius;
+    }
+
+    public void setRadius(double radius) {
+        this.radius = radius;
+    }
+
+    @Override
+    public double perimetr() {
+        return 2 * Math.PI * radius; //Math.PI - число ПИ
+    }
+
+    @Override
+    public double ploshad() {
+        return Math.PI * (radius * radius);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Krug krug = (Krug) o;
+        return Double.compare(krug.radius, radius) == 0;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(radius);
+    }
+
+    @Override
+    public String toString() {
+        return "Krug{" +
+                "radius=" + radius +
+                '}';
+    }
+}
Index: src/lesson10/interfaces/Figura.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/interfaces/Figura.java b/src/lesson10/interfaces/Figura.java
new file mode 100644
--- /dev/null	(date 1622571613068)
+++ b/src/lesson10/interfaces/Figura.java	(date 1622571613068)
@@ -0,0 +1,6 @@
+package lesson10.interfaces;
+
+public interface Figura {
+    double perimetr(); //abstract - без тела
+    double ploshad();
+}
Index: src/lesson10/PhoneUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/PhoneUtils.java b/src/lesson10/PhoneUtils.java
new file mode 100644
--- /dev/null	(date 1622570315458)
+++ b/src/lesson10/PhoneUtils.java	(date 1622570315458)
@@ -0,0 +1,41 @@
+package lesson10;
+
+import java.util.ArrayList;
+
+public class PhoneUtils {
+    public static void printAllPhonesByProduction(ArrayList<Phone> phones, String production) {
+        for (Phone phone : phones) {
+            if (phone.getManufacturer().equals(production)) {
+                System.out.println(phone);
+            }
+        }
+    }
+
+    public static void printTheBigestResolution(ArrayList<Phone> phones) {
+        Phone bigestPhone = phones.get(0);
+        for (Phone phone : phones) {
+            if (phone.getScreenDiagonal() > bigestPhone.getScreenDiagonal()) {
+                bigestPhone = phone;
+            }
+        }
+        System.out.println(bigestPhone);
+    }
+
+    public static void printTheSmallestResolution(ArrayList<Phone> phones) {
+        Phone smallestPhone = phones.get(0);
+        for (Phone phone : phones) {
+            if (phone.getScreenDiagonal() < smallestPhone.getScreenDiagonal()) {
+                smallestPhone = phone;
+            }
+        }
+        System.out.println(smallestPhone);
+    }
+
+    public static void printAverageDiagonalOfAll(ArrayList<Phone> phones) {
+        double allDioganal = 0;
+        for (Phone phone : phones) {
+            allDioganal+=phone.getScreenDiagonal();
+        }
+        System.out.println(allDioganal);
+    }
+}
Index: src/lesson10/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/Main.java b/src/lesson10/Main.java
new file mode 100644
--- /dev/null	(date 1622571231201)
+++ b/src/lesson10/Main.java	(date 1622571231201)
@@ -0,0 +1,61 @@
+package lesson10;
+
+import java.util.ArrayList;
+
+public class Main {
+    public static void main(String[] args) {
+
+        Phone phone1 = new Phone(6.4, "A14 Bionic", 4, "Phone 1", "Apple");
+        Phone phone2 = new Phone(5, "A12 Bionic", 3, "Phone 2", "Apple");
+        Phone phone3 = new Phone(5.3, "A13 Bionic", 5, "Phone 3", "Apple");
+        Phone phone4 = new Phone(4, "Snapdragon 888", 4, "Phone 4", "Samsung");
+        Phone phone5 = new Phone(5, "Exynos 2100", 4, "Phone 5", "Samsung");
+        Phone phone6 = new Phone(3.9, "Kirin 9000", 4, "Phone 6", "Samsung");
+        Phone phone7 = new Phone(7.1, "Snapdragon 870", 5, "Phone 7", "Xiaomi");
+        Phone phone8 = new Phone(5.2, "Exynos 1080", 6, "Phone 8", "Xiaomi");
+        Phone phone9 = new Phone(5.3, "Snapdragon 865", 4, "Phone 9", "LG");
+        Phone phone10 = new Phone(5.4, "Kirin 9000E", 3, "Phone 10", "LG");
+        Phone phone11 = new Phone(6.4, "A14 Bionic", 4, "Phone 1", "Apple");
+
+        ArrayList<Phone> phones = new ArrayList<>();
+        phones.add(phone1);
+        phones.add(phone2);
+        phones.add(phone3);
+        phones.add(phone4);
+        phones.add(phone5);
+        phones.add(phone6);
+        phones.add(phone7);
+        phones.add(phone8);
+        phones.add(phone9);
+        phones.add(phone10);
+        phones.add(phone11);
+
+//        PhoneUtils.printAllPhonesByProduction(phones, "Apple");
+//        PhoneUtils.printTheBigestResolution(phones);
+
+        // 1. Вывести самый маленький телефон
+        PhoneUtils.printTheSmallestResolution(phones);
+        // 2. Среднее значение диаганали
+        PhoneUtils.printAverageDiagonalOfAll(phones);
+
+        System.out.println(phone1.equals(phone11));
+
+        System.out.println(phone1.hashCode());
+        System.out.println(phone11.hashCode());
+        System.out.println(phone5.hashCode());
+
+        // уснуть
+//        synchronized (phone1) {
+//            try {
+//                phone1.wait();
+//            } catch (InterruptedException e) {
+//                e.printStackTrace();
+//            }
+//
+//        }
+        //Проснутся это notify
+
+        System.out.println("asdasdasd");
+
+    }
+}
Index: src/lesson10/Phone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/Phone.java b/src/lesson10/Phone.java
new file mode 100644
--- /dev/null	(date 1622571055386)
+++ b/src/lesson10/Phone.java	(date 1622571055386)
@@ -0,0 +1,87 @@
+package lesson10;
+
+import java.util.Objects;
+
+public class Phone {
+    private double screenDiagonal;
+    private String processor;
+    private int coresProcessor;
+    private String model;
+    private String manufacturer;
+
+    public Phone() {
+    }
+
+    public Phone(double screenDiagonal, String processor, int coresProcessor, String model, String manufacturer) {
+        this.screenDiagonal=screenDiagonal;
+        this.processor=processor;
+        this.coresProcessor=coresProcessor;
+        this.model=model;
+        this.manufacturer=manufacturer;
+    }
+
+    public double getScreenDiagonal() {
+        return screenDiagonal;
+    }
+
+    public void setScreenDiagonal(double screenDiagonal) {
+        this.screenDiagonal = screenDiagonal;
+    }
+
+    public String getProcessor() {
+        return processor;
+    }
+
+    public void setProcessor(String processor) {
+        this.processor = processor;
+    }
+
+    public int getCoresProcessor() {
+        return coresProcessor;
+    }
+
+    public void setCoresProcessor(int coresProcessor) {
+        this.coresProcessor = coresProcessor;
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model;
+    }
+
+    public String getManufacturer() {
+        return manufacturer;
+    }
+
+    public void setManufacturer(String manufacturer) {
+        this.manufacturer = manufacturer;
+    }
+
+    @Override
+    public String toString() {
+        return "Телефон" +
+                " " + manufacturer +
+                " " + model +
+                " screenDiagonal=" + screenDiagonal +
+                ", processor='" + processor + '\'' +
+                ", coresProcessor=" + coresProcessor;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Phone phone = (Phone) o;
+        return Double.compare(phone.screenDiagonal, screenDiagonal) == 0 && coresProcessor == phone.coresProcessor && Objects.equals(processor, phone.processor) && Objects.equals(model, phone.model) && Objects.equals(manufacturer, phone.manufacturer);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(screenDiagonal, processor, coresProcessor, model, manufacturer);
+    }
+
+
+}
\ No newline at end of file
Index: src/lesson10/interfaces/Pryamougolnik.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/interfaces/Pryamougolnik.java b/src/lesson10/interfaces/Pryamougolnik.java
new file mode 100644
--- /dev/null	(date 1622572292624)
+++ b/src/lesson10/interfaces/Pryamougolnik.java	(date 1622572292624)
@@ -0,0 +1,63 @@
+package lesson10.interfaces;
+
+import java.util.Objects;
+
+public class Pryamougolnik implements Figura {
+    private int a;
+    private int b;
+
+    public Pryamougolnik() {
+    }
+
+    public Pryamougolnik(int a, int b) {
+        this.a = a;
+        this.b = b;
+    }
+
+    public int getA() {
+        return a;
+    }
+
+    public void setA(int a) {
+        this.a = a;
+    }
+
+    public int getB() {
+        return b;
+    }
+
+    public void setB(int b) {
+        this.b = b;
+    }
+
+    @Override
+    public double perimetr() {
+        return a + a + b + b;
+    }
+
+    @Override
+    public double ploshad() {
+        return a * b;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Pryamougolnik that = (Pryamougolnik) o;
+        return a == that.a && b == that.b;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(a, b);
+    }
+
+    @Override
+    public String toString() {
+        return "Pryamougolnik{" +
+                "a=" + a +
+                ", b=" + b +
+                '}';
+    }
+}
Index: src/lesson10/interfaces/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/interfaces/Main.java b/src/lesson10/interfaces/Main.java
new file mode 100644
--- /dev/null	(date 1622573487757)
+++ b/src/lesson10/interfaces/Main.java	(date 1622573487757)
@@ -0,0 +1,22 @@
+package lesson10.interfaces;
+
+import java.util.ArrayList;
+
+public class Main {
+    public static void main(String[] args) {
+        Krug krug1 = new Krug(5);
+        Krug krug2 = new Krug(3);
+        Pryamougolnik pryamougolnik1 = new Pryamougolnik(2, 5);
+        Pryamougolnik pryamougolnik2 = new Pryamougolnik(4, 7);
+
+        ArrayList<Figura> figuras = new ArrayList<>();
+        figuras.add(krug1);
+        figuras.add(krug2);
+        figuras.add(pryamougolnik1);
+        figuras.add(pryamougolnik2);
+
+        for (Figura f:figuras) { //Надо еще раз разобрать
+            System.out.println(f.toString()); //Проявление полиморфизма
+        }
+    }
+}
Index: src/lesson10/interfaces/FractionNumberOperation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/interfaces/FractionNumberOperation.java b/src/lesson10/interfaces/FractionNumberOperation.java
new file mode 100644
--- /dev/null	(date 1622573723626)
+++ b/src/lesson10/interfaces/FractionNumberOperation.java	(date 1622573723626)
@@ -0,0 +1,51 @@
+package lesson10.interfaces;
+
+/**
+ * Интерфейс операций с числами FractionNumber. Для вывода ошибок функции могут бросать ArithmeticException
+ * 
+ * @author nedis
+ * @version 1.0
+ */
+public interface FractionNumberOperation {
+	
+	/**
+	 * Сложение двух чисел FractionNumber
+	 * 
+	 * @param a первое слагаемое 
+	 * @param b второе слагаемое
+	 * @return результат в виде числа FractionNumber
+	 * @throws NullPointerException если а или b равны null
+	 */
+	FractionNumber add (FractionNumber a, FractionNumber b) throws NullPointerException;
+	
+	/**
+	 * Вычитание двух чисел FractionNumber
+	 * 
+	 * @param a уменьшаемое
+	 * @param b вычитаемое
+	 * @return результат в виде числа FractionNumber
+	 * @throws NullPointerException если а или b равны null
+	 */
+	FractionNumber sub (FractionNumber a, FractionNumber b) throws NullPointerException;
+	
+	/**
+	 * Умнодение двух чисел FractionNumber
+	 * 
+	 * @param a первый множитель
+	 * @param b второй множитель
+	 * @return результат в виде числа FractionNumber
+	 * @throws NullPointerException если а или b равны null
+	 */
+	FractionNumber mul (FractionNumber a, FractionNumber b) throws NullPointerException;
+	
+	/**
+	 * Деление двух чисел FractionNumber
+	 * 
+	 * @param a делимое
+	 * @param b делитель
+	 * @return результат в виде числа FractionNumber
+	 * @throws NullPointerException если а или b равны null
+	 * @throws ArithmeticException в случае если происходит деление на 0
+	 */
+	FractionNumber div (FractionNumber a, FractionNumber b) throws NullPointerException, ArithmeticException;
+}
Index: src/lesson10/interfaces/FractionNumber.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/interfaces/FractionNumber.java b/src/lesson10/interfaces/FractionNumber.java
new file mode 100644
--- /dev/null	(date 1622573723633)
+++ b/src/lesson10/interfaces/FractionNumber.java	(date 1622573723633)
@@ -0,0 +1,61 @@
+package lesson10.interfaces;
+
+/**
+ * Интерфейс представляющий число в виде дроби. Для вывода ошибок функции могут бросать IllegalArgumentException
+ * Данный интерфейс может быть использован для хранения обычных дробей, например 1/2, 1/4, 3/7 и т.д.
+ * 
+ * @author nedis
+ * @version 1.0
+ */
+public interface FractionNumber {
+
+	/**
+	 * Значение делителя после создания объкта конструктором
+	 */
+	int DEFAULT_DIVISOR_VALUE = 1;
+	/**
+	 * Установить делимое 
+	 * 
+	 * @param dividend делимое
+	 */
+	void setDividend(int dividend);
+	
+	/**
+	 * Получить делимое 
+	 * 
+	 * @return делимое
+	 */
+	int getDividend();
+	
+	/**
+	 * Установить делитель 
+	 * 
+	 * @param divisor делитель 
+	 * @throws IllegalArgumentException если пытаются установить делитель равный 0
+	 */
+	void setDivisor(int divisor) throws IllegalArgumentException;
+	
+	/**
+	 * Получить делитель
+	 * 
+	 * @return делитель
+	 */
+	int getDivisor();
+	
+	/**
+	 * Получить значение как вещественное число. 
+	 * Например если делимое = 1, делитель = 4, то вещественное число для дроби 1/4 = 0.25 
+	 * 
+	 * @return вещественное число для заднной дроби
+	 */
+	double value();
+	
+	/**
+	 * Получить символьное представление числа
+	 * Например если делимое = 1, делитель = 4, то символьное представление числа равно 1/4
+	 * 
+	 * @return символьное представление числа
+	 */
+	String toString();
+}
+
Index: src/lesson10/interfaces/DrobnoeChislo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/interfaces/DrobnoeChislo.java b/src/lesson10/interfaces/DrobnoeChislo.java
new file mode 100644
--- /dev/null	(date 1622573723630)
+++ b/src/lesson10/interfaces/DrobnoeChislo.java	(date 1622573723630)
@@ -0,0 +1,4 @@
+package lesson10.interfaces;
+
+public class DrobnoeChislo {
+}
Index: src/lesson3/Main13.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main13.java b/src/lesson3/Main13.java
new file mode 100644
--- /dev/null	(date 1621596887390)
+++ b/src/lesson3/Main13.java	(date 1621596887390)
@@ -0,0 +1,25 @@
+package lesson3;
+
+public class Main13 {
+    public static void main(String[] args) {
+        String password = "Passw0rd";
+        int symbols = 0;
+        // Если нет спецсиволов, то пароль простой
+        // Если 1-2 спецсимвола, то средний пароль
+        // Если >2
+        // ?!*\
+        for (int i = 0; i < password.length(); i++) {
+            if (password.charAt(i) == '?' || password.charAt(i) == '!' || password.charAt(i) == '*' || password.charAt(i) == '/') {
+                symbols++;
+            }
+        }
+
+        if (symbols == 0) {
+            System.out.println("Простой пароль");
+        } else if (symbols < 3) {
+            System.out.println("Средний пароль");
+        } else {
+            System.out.println("Сложный пароль");
+        }
+    }
+}
\ No newline at end of file
Index: src/lesson3/Main4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main4.java b/src/lesson3/Main4.java
new file mode 100644
--- /dev/null	(date 1621596882358)
+++ b/src/lesson3/Main4.java	(date 1621596882358)
@@ -0,0 +1,12 @@
+package lesson3;
+
+public class Main4 {
+    public static void main(String[] args) {
+// от 10 до 100
+        for (int i = 10; i < 101; i++) {
+            if (i % 3 == 0 && i % 5 == 0) {
+                System.out.println(i);
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/lesson3/Main5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main5.java b/src/lesson3/Main5.java
new file mode 100644
--- /dev/null	(date 1621596882941)
+++ b/src/lesson3/Main5.java	(date 1621596882941)
@@ -0,0 +1,9 @@
+package lesson3;
+
+public class Main5 {
+    public static void main(String[] args) {
+        for (int i=20;i >= 0;i--){
+            System.out.println(i);
+        }
+    }
+}
Index: src/lesson3/Main9.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main9.java b/src/lesson3/Main9.java
new file mode 100644
--- /dev/null	(date 1621596885094)
+++ b/src/lesson3/Main9.java	(date 1621596885094)
@@ -0,0 +1,11 @@
+package lesson3;
+
+public class Main9 {
+    public static void main(String[] args) {
+        for (int i = 10; i <= 50; i++) {
+            if (i < 30 || i > 40) {
+                System.out.println(i);
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/lesson3/Main3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main3.java b/src/lesson3/Main3.java
new file mode 100644
--- /dev/null	(date 1621596864261)
+++ b/src/lesson3/Main3.java	(date 1621596864261)
@@ -0,0 +1,10 @@
+package lesson3;
+
+public class Main3 {
+    public static void main(String[] args) {
+
+        for (int i = -50; i < -9; i = i +2) {
+            System.out.println(i);
+        }
+    }
+}
Index: src/lesson3/Main6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main6.java b/src/lesson3/Main6.java
new file mode 100644
--- /dev/null	(date 1621596883606)
+++ b/src/lesson3/Main6.java	(date 1621596883606)
@@ -0,0 +1,11 @@
+package lesson3;
+
+public class Main6 {
+    public static void main(String[] args) {
+        int ammount = 0;
+        for (int i = 10; i < 21; i++) {
+            ammount = i + ammount;
+        }
+        System.out.println(ammount);
+    }
+}
Index: src/lesson3/Main12.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main12.java b/src/lesson3/Main12.java
new file mode 100644
--- /dev/null	(date 1621596886870)
+++ b/src/lesson3/Main12.java	(date 1621596886870)
@@ -0,0 +1,14 @@
+package lesson3;
+
+public class Main12 {
+    public static void main(String[] args) {
+        String text = "Luboi pobolshe";
+        int summa = 0;
+        for ( int i = 0; i < text.length(); i++) {
+            if (text.charAt(i)=='u' || text.charAt(i)=='o' || text.charAt(i)=='e' || text.charAt(i)=='i') {
+              summa++;
+            }
+        }
+        System.out.println(summa);
+    }
+}
Index: src/lesson3/Main8.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main8.java b/src/lesson3/Main8.java
new file mode 100644
--- /dev/null	(date 1621596884534)
+++ b/src/lesson3/Main8.java	(date 1621596884534)
@@ -0,0 +1,23 @@
+//package lesson3;
+//
+//public class Main8 {
+//    public static void main(String[] args) {
+//        int a = 7;
+//        int b = 17;
+//        if (a )
+//        for (int i=17;) {
+//
+//        }
+//    }
+//}
+package lesson3;
+
+public class Main8 {
+    public static void main(String[] args) {
+        for (int i = 1000; i > 499; i--) {
+            if (i % 3 == 0 && i % 7 == 0) {
+                System.out.println(i);
+            }
+        }
+    }
+}
Index: src/lesson3/Main7.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main7.java b/src/lesson3/Main7.java
new file mode 100644
--- /dev/null	(date 1621596884069)
+++ b/src/lesson3/Main7.java	(date 1621596884069)
@@ -0,0 +1,12 @@
+package lesson3;
+
+public class Main7 {
+    public static void main(String[] args) {
+
+        for (int i = 10; i >= 0; i--) {
+            System.out.println(i);
+        }
+        System.out.println("Пуск!");
+
+    }
+}
Index: src/lesson3/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main2.java b/src/lesson3/Main2.java
new file mode 100644
--- /dev/null	(date 1621596888277)
+++ b/src/lesson3/Main2.java	(date 1621596888277)
@@ -0,0 +1,12 @@
+package lesson3;
+
+public class Main2 {
+    public static void main(String[] args) {
+        // от 20 до 40
+
+        // Если в for будет 2 ;; то бесконечное повторение
+        for (int i = 20; i < 41; i++) {
+            System.out.println(i);
+        }
+    }
+}
Index: src/lesson3/Main11.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main11.java b/src/lesson3/Main11.java
new file mode 100644
--- /dev/null	(date 1621596886158)
+++ b/src/lesson3/Main11.java	(date 1621596886158)
@@ -0,0 +1,12 @@
+package lesson3;
+
+public class Main11 {
+    public static void main(String[] args) {
+        String text = "Mog napisat";
+        for (int i = 0; i < text.length(); i++) {
+            if (text.charAt(i) == 'o' || text.charAt(i) == 'a' || text.charAt(i) == 'i') {
+                System.out.println(text.charAt(i));
+            }
+        }
+    }
+}
Index: src/lesson3/Main10.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main10.java b/src/lesson3/Main10.java
new file mode 100644
--- /dev/null	(date 1621596885742)
+++ b/src/lesson3/Main10.java	(date 1621596885742)
@@ -0,0 +1,23 @@
+//package lesson3;
+//
+//public class Main10 {
+//    public static void main(String[] args) {
+//        String text = "Любой текст";
+//        for (int i=0;i<text.length();i++) {
+//            System.out.println(text.charAt(i));
+//        }
+//
+//    }
+//}
+//naoborotText
+package lesson3;
+
+public class Main10 {
+    public static void main(String[] args) {
+        String text = "Любой текст";
+        for (int i = text.length()-1; i >= 0; i--) {
+            System.out.println(text.charAt(i));
+        }
+
+    }
+}
Index: src/lesson3/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson3/Main1.java b/src/lesson3/Main1.java
new file mode 100644
--- /dev/null	(date 1621596887782)
+++ b/src/lesson3/Main1.java	(date 1621596887782)
@@ -0,0 +1,11 @@
+package lesson3;
+
+public class Main1 {
+    public static void main(String[] args) {
+
+        // Если в for будет 2 ;; то бесконечное повторение
+        for (int i = 0; i < 5; i++) {
+            System.out.println("Привет!");
+        }
+    }
+}
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1621962582165)
+++ b/.idea/uiDesigner.xml	(date 1621962582165)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1620125986906)
+++ b/.idea/.gitignore	(date 1620125986906)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
+# Editor-based HTTP Client requests
+/httpRequests/
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1620125970995)
+++ b/.idea/modules.xml	(date 1620125970995)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/javaJunior-1.iml" filepath="$PROJECT_DIR$/javaJunior-1.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: src/lesson13/Main4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/Main4.java b/src/lesson13/Main4.java
new file mode 100644
--- /dev/null	(date 1623430606982)
+++ b/src/lesson13/Main4.java	(date 1623430606982)
@@ -0,0 +1,22 @@
+package lesson13;
+
+import java.util.TreeSet;
+
+public class Main4 {
+    public static void main(String[] args) {
+        Tovar tovar1 = new Tovar(120, "Мышка", 3.7);
+        Tovar tovar2 = new Tovar(500, "Клавиатура", 4.7);
+        Tovar tovar3 = new Tovar(700, "Моноблок", 5);
+
+        TreeSet<Tovar> tovars = new TreeSet<>();
+        tovars.add(tovar1);
+        tovars.add(tovar2);
+        tovars.add(tovar3);
+
+        TreeSet<Tovar> sortedByName = TovarUtils.sortByName(tovars);
+
+        for (Tovar t:sortedByName) {
+            System.out.println(t);
+        }
+    }
+}
Index: src/lesson13/TovarUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/TovarUtils.java b/src/lesson13/TovarUtils.java
new file mode 100644
--- /dev/null	(date 1623430606979)
+++ b/src/lesson13/TovarUtils.java	(date 1623430606979)
@@ -0,0 +1,29 @@
+package lesson13;
+
+import java.util.Comparator;
+import java.util.TreeSet;
+
+public class TovarUtils {
+
+    public static TreeSet<Tovar> sortByName(TreeSet<Tovar> tovars) {
+        TreeSet<Tovar> sorted = new TreeSet<>(new Comparator<Tovar>() {
+            @Override
+            public int compare(Tovar o1, Tovar o2) {
+                if (o1.getName() != o2.getName()) {
+                    return o1.getName().compareTo(o2.getName());
+                }
+
+                if (o1.getPrice() != o2.getPrice()) {
+                    return o1.getPrice()-o2.getPrice();
+                }
+
+                if (o1.getRate() != o2.getRate()) {
+                    return Double.compare(o1.getRate(),o2.getRate());
+                }
+                return 0;
+            }
+        });
+        sorted.addAll(tovars);
+        return sorted;
+    }
+}
Index: src/lesson13/Tovar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/Tovar.java b/src/lesson13/Tovar.java
new file mode 100644
--- /dev/null	(date 1623430457992)
+++ b/src/lesson13/Tovar.java	(date 1623430457992)
@@ -0,0 +1,80 @@
+package lesson13;
+
+import java.util.Objects;
+
+public class Tovar implements Comparable<Tovar> {
+    private int price;
+    private String name;
+    private double rate;
+
+    public Tovar() {
+    }
+
+    public Tovar(int price, String name, double rate) {
+        this.price = price;
+        this.name = name;
+        this.rate = rate;
+    }
+
+    public int getPrice() {
+        return price;
+    }
+
+    public void setPrice(int price) {
+        this.price = price;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public double getRate() {
+        return rate;
+    }
+
+    public void setRate(double rate) {
+        this.rate = rate;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Tovar tovar = (Tovar) o;
+        return price == tovar.price && Double.compare(tovar.rate, rate) == 0 && Objects.equals(name, tovar.name);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(price, name, rate);
+    }
+
+    @Override
+    public String toString() {
+        return "Tovar{" +
+                "price=" + price +
+                ", name='" + name + '\'' +
+                ", rate=" + rate +
+                '}';
+    }
+
+    @Override
+    public int compareTo(Tovar o) {
+        if (this.getRate() != o.getRate()) {
+            return Double.compare(this.getRate(),o.getRate());
+        }
+
+        if (this.getPrice() != o.getPrice()) {
+            return this.getPrice()-o.getPrice();
+        }
+
+        if (this.getName() != o.getName()) {
+            return this.getName().compareTo(o.getName());
+        }
+        return 0;
+    }
+}
Index: src/lesson14/IntegerReverseComparator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14/IntegerReverseComparator.java b/src/lesson14/IntegerReverseComparator.java
new file mode 100644
--- /dev/null	(date 1623420880377)
+++ b/src/lesson14/IntegerReverseComparator.java	(date 1623420880377)
@@ -0,0 +1,10 @@
+package lesson14;
+
+import java.util.Comparator;
+
+public class IntegerReverseComparator implements Comparator<Integer> {
+    @Override
+    public int compare(Integer o1, Integer o2) {
+        return - o1.compareTo(o2);
+    }
+}
Index: src/lesson14/StringReverseComparator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14/StringReverseComparator.java b/src/lesson14/StringReverseComparator.java
new file mode 100644
--- /dev/null	(date 1623420782303)
+++ b/src/lesson14/StringReverseComparator.java	(date 1623420782303)
@@ -0,0 +1,11 @@
+package lesson14;
+
+import java.util.Comparator;
+
+public class StringReverseComparator implements Comparator<String> {
+
+    @Override
+    public int compare(String o1, String o2) {
+        return - o1.compareTo(o2);
+    }
+}
Index: src/lesson14/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14/Main1.java b/src/lesson14/Main1.java
new file mode 100644
--- /dev/null	(date 1623420880372)
+++ b/src/lesson14/Main1.java	(date 1623420880372)
@@ -0,0 +1,24 @@
+package lesson14;
+
+import java.util.TreeSet;
+
+public class Main1 {
+    public static void main(String[] args) {
+        TreeSet<Integer> treeSet = new TreeSet<>(new IntegerReverseComparator());
+        treeSet.add(6);
+        treeSet.add(1);
+        treeSet.add(9);
+        treeSet.add(2);
+        treeSet.add(1);
+        treeSet.add(7);
+        treeSet.add(4);
+        System.out.println(treeSet);
+
+        TreeSet<String> treeSet1 = new TreeSet<>(new StringReverseComparator());
+        treeSet1.add("hello");
+        treeSet1.add("privet");
+        treeSet1.add("medved");
+        treeSet1.add("medvedmedved");
+        System.out.println(treeSet1);
+    }
+}
Index: src/lesson14/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14/Main.java b/src/lesson14/Main.java
new file mode 100644
--- /dev/null	(date 1623419494168)
+++ b/src/lesson14/Main.java	(date 1623419494168)
@@ -0,0 +1,42 @@
+package lesson14;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+
+public class Main {
+    public static void main(String[] args) {
+        ArrayList<Integer> a = new ArrayList<>();
+        a.add(4);
+        a.add(5);
+        a.add(6);
+        a.add(7);
+        a.add(8);
+        a.add(9);
+        a.add(10);
+
+        HashSet<Integer> b = new HashSet<>();
+        b.add(8);
+        b.add(9);
+        b.add(10);
+        b.add(11);
+        b.add(12);
+
+        CollectionUtilsImpl utils = new CollectionUtilsImpl();
+
+        Collection<Integer> union = utils.union(a, b);
+        System.out.println(union);
+
+        Collection<Integer> intersection = utils.intersection(a, b);
+        System.out.println(intersection);
+
+        Collection<Integer> unionWithoutDuplicate = utils.unionWithoutDuplicate(a, b);
+        System.out.println(unionWithoutDuplicate);
+
+        Collection<Integer> intersectionWithoutDuplicate = utils.intersectionWithoutDuplicate(a, b);
+        System.out.println(intersectionWithoutDuplicate);
+
+        Collection<Integer> difference = utils.difference(a, b);
+        System.out.println(difference);
+    }
+}
Index: src/lesson14/CollectionUtilsImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14/CollectionUtilsImpl.java b/src/lesson14/CollectionUtilsImpl.java
new file mode 100644
--- /dev/null	(date 1623419448058)
+++ b/src/lesson14/CollectionUtilsImpl.java	(date 1623419448058)
@@ -0,0 +1,79 @@
+package lesson14;
+
+import java.util.*;
+
+public class CollectionUtilsImpl implements CollectionUtils {
+    @Override
+    public Collection<Integer> union(Collection<Integer> a, Collection<Integer> b) throws NullPointerException {
+        ArrayList<Integer> union = new ArrayList<>();
+        for (Integer num : a) {
+            union.add(num);
+        }
+
+        for (Integer num : b) {
+            union.add(num);
+        }
+        return union;
+    }
+
+    @Override
+    public Collection<Integer> intersection(Collection<Integer> a, Collection<Integer> b) throws NullPointerException {
+        ArrayList<Integer> intersection = new ArrayList<>();
+        for (Integer one : a) {
+            if (b.contains(one)) {
+                intersection.add(one);
+            }
+        }
+
+        for (Integer two : b) {
+            if (a.contains(two)) {
+                intersection.add(two);
+            }
+        }
+        return intersection;
+    }
+
+    @Override
+    public Set<Integer> unionWithoutDuplicate(Collection<Integer> a, Collection<Integer> b) throws NullPointerException {
+        HashSet<Integer> unionWithoutDuplicate = new HashSet<>();
+        for (Integer one : a) {
+            unionWithoutDuplicate.add(one);
+        }
+
+        for (Integer two : b) {
+            if (!unionWithoutDuplicate.contains(two)) {
+                unionWithoutDuplicate.add(two);
+            }
+        }
+
+        return unionWithoutDuplicate;
+    }
+
+    @Override
+    public Set<Integer> intersectionWithoutDuplicate(Collection<Integer> a, Collection<Integer> b) throws NullPointerException {
+        HashSet<Integer> intersectionWithoutDuplicate = new HashSet<>();
+        for (Integer one : a) {
+            if (b.contains(one)) {
+                intersectionWithoutDuplicate.add(one);
+            }
+        }
+        return intersectionWithoutDuplicate;
+    }
+
+    @Override
+    public Collection<Integer> difference(Collection<Integer> a, Collection<Integer> b) throws NullPointerException {
+        LinkedList<Integer> difference = new LinkedList<>();
+        for (Integer num : a) {
+            if (!b.contains(num)) {
+                difference.add(num);
+            }
+        }
+
+        for (Integer num : b) {
+            if (!a.contains(num)) {
+                difference.add(num);
+            }
+        }
+        return difference;
+    }
+}
Index: src/lesson14/CollectionUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson14/CollectionUtils.java b/src/lesson14/CollectionUtils.java
new file mode 100644
--- /dev/null	(date 1623418162334)
+++ b/src/lesson14/CollectionUtils.java	(date 1623418162334)
@@ -0,0 +1,63 @@
+package lesson14;
+
+import java.util.Collection;
+import java.util.Set;
+
+/**
+ * Утилиты для работы с коллекциями объектов 
+ * 
+ * @author nedis
+ * @version 1.0
+ */
+public interface CollectionUtils {
+
+	/**
+	 * Объединение двух коллекций с дубликатами
+	 * 
+	 * @param a первая коллекция
+	 * @param b вторая коллекция
+	 * @return новая колекция содержащая объединение a и b, может содержать дубликаты 
+	 * @throws NullPointerException если a или b == null
+	 */
+	Collection<Integer> union (Collection<Integer> a, Collection<Integer> b) throws NullPointerException;
+	
+	/**
+	 * Пересечение двух коллекций с дубликатами
+	 * 
+	 * @param a первая коллекция
+	 * @param b вторая коллекция
+	 * @return новая колекция содержащая пересечение a и b, может содержать дубликаты 
+	 * @throws NullPointerException если a или b == null
+	 */
+	Collection<Integer> intersection (Collection<Integer> a, Collection<Integer> b) throws NullPointerException;
+	
+	/**
+	 * Объединение двух коллекций без дубликатов
+	 * 
+	 * @param a первая коллекция
+	 * @param b вторая коллекция
+	 * @return новая колекция содержащая объединение a и b без дубликатов 
+	 * @throws NullPointerException если a или b == null
+	 */
+	Set<Integer> unionWithoutDuplicate (Collection<Integer> a, Collection<Integer> b) throws NullPointerException;
+	
+	/**
+	 * Пересечение двух коллекций без дубликатов 
+	 * 
+	 * @param a первая коллекция
+	 * @param b вторая коллекция
+	 * @return новая колекция содержащая пересечение a и b без дубликатов
+	 * @throws NullPointerException если a или b == null
+	 */
+	Set<Integer> intersectionWithoutDuplicate (Collection<Integer> a, Collection<Integer> b) throws NullPointerException;
+	
+	/**
+	 * Разность двух коллекций  
+	 * 
+	 * @param a первая коллекция
+	 * @param b вторая коллекция
+	 * @return новая колекция содержащая разность a и b 
+	 * @throws NullPointerException если a или b == null
+	 */
+	Collection<Integer> difference (Collection<Integer> a, Collection<Integer> b) throws NullPointerException;
+}
Index: src/lesson13/Main3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/Main3.java b/src/lesson13/Main3.java
new file mode 100644
--- /dev/null	(date 1623426839332)
+++ b/src/lesson13/Main3.java	(date 1623426839332)
@@ -0,0 +1,48 @@
+package lesson13;
+
+import java.util.Comparator;
+import java.util.TreeSet;
+
+public class Main3 {
+    public static void main(String[] args) {
+        Coin coin1 = new Coin(2.5, 2, "Золото", 5);
+        Coin coin2 = new Coin(2.5, 2, "Золото", 5);
+        Coin coin3 = new Coin(2, 10, "Серебро", 10);
+        Coin coin4 = new Coin(5, 5, "Бронза", 25);
+        Coin coin5 = new Coin(4, 2, "Серебро", 25);
+        Coin coin6 = new Coin(4, 2, "Бронза", 5);
+
+        TreeSet<Coin> coins = new TreeSet<>(new Comparator<Coin>() {
+            @Override
+            public int compare(Coin o1, Coin o2) {
+                if (o1.getNominal() != o2.getNominal()) {
+                    return o1.getNominal() - o2.getNominal();
+                }
+
+                if (o1.getDiametr() != o2.getDiametr()) {
+                    return Double.compare(o1.getDiametr(), o2.getDiametr());
+                }
+
+                if (o1.getVes() != o2.getVes()) {
+                    return Double.compare(o1.getVes(), o2.getVes());
+                }
+
+                if (o1.getMetall() != o2.getMetall()) {
+                    return o1.getMetall().compareTo(o2.getMetall());
+                }
+
+                return 0;
+            }
+        });
+        coins.add(coin1);
+        coins.add(coin2);
+        coins.add(coin3);
+        coins.add(coin4);
+        coins.add(coin5);
+        coins.add(coin6);
+
+        for (Coin c : coins) {
+            System.out.println(c);
+        }
+    }
+}
Index: src/lesson13/Coin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/Coin.java b/src/lesson13/Coin.java
new file mode 100644
--- /dev/null	(date 1623422221035)
+++ b/src/lesson13/Coin.java	(date 1623422221035)
@@ -0,0 +1,82 @@
+package lesson13;
+
+
+public class Coin implements Comparable<Coin> {
+    private double diametr;
+    private double ves;
+    private String metall;
+    private int nominal;
+
+    public Coin() {
+    }
+
+    public Coin(double diametr, double ves, String metall, int nominal) {
+        this.diametr = diametr;
+        this.ves = ves;
+        this.metall = metall;
+        this.nominal = nominal;
+    }
+
+    public double getDiametr() {
+        return diametr;
+    }
+
+    public void setDiametr(double diametr) {
+        this.diametr = diametr;
+    }
+
+    public double getVes() {
+        return ves;
+    }
+
+    public void setVes(double ves) {
+        this.ves = ves;
+    }
+
+    public String getMetall() {
+        return metall;
+    }
+
+    public void setMetall(String metall) {
+        this.metall = metall;
+    }
+
+    public int getNominal() {
+        return nominal;
+    }
+
+    public void setNominal(int nominal) {
+        this.nominal = nominal;
+    }
+
+    @Override
+    public String toString() {
+        return "Coin{" +
+                "diametr=" + diametr +
+                ", ves=" + ves +
+                ", metall='" + metall + '\'' +
+                ", nominal=" + nominal +
+                '}';
+    }
+
+    @Override
+    public int compareTo(Coin o) {
+        if (this.getNominal() != o.getNominal()) {
+            return this.getNominal() - o.getNominal();
+        }
+
+        if (this.getDiametr() != o.getDiametr()) {
+            return Double.compare(this.getDiametr(), o.getDiametr());
+        }
+
+        if (this.getVes() != o.getVes()) {
+            return Double.compare(this.getVes(), o.getVes());
+        }
+
+        if (this.getMetall() != o.getMetall()) {
+            return this.getMetall().compareTo(o.getMetall());
+        }
+
+        return 0;
+    }
+}
Index: src/homework/lesson8/Telephone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/lesson8/Telephone.java b/src/homework/lesson8/Telephone.java
new file mode 100644
--- /dev/null	(date 1622547079890)
+++ b/src/homework/lesson8/Telephone.java	(date 1622547079890)
@@ -0,0 +1,24 @@
+package homework.lesson8;
+
+import java.util.ArrayList;
+
+public class Telephone {
+    private float screenDiagonal;
+    private String processor;
+    private int coresProcessor;
+    private String model;
+    private String manufacturer;
+
+    public Telephone() {
+    }
+
+    public Telephone(float screenDiagonal, String processor, int coresProcessor, String model, String manufacturer) {
+        this.screenDiagonal=screenDiagonal;
+        this.processor=processor;
+        this.coresProcessor=coresProcessor;
+        this.model=model;
+        this.manufacturer=manufacturer;
+    }
+
+
+}
Index: src/lesson13/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/Main2.java b/src/lesson13/Main2.java
new file mode 100644
--- /dev/null	(date 1623176454031)
+++ b/src/lesson13/Main2.java	(date 1623176454031)
@@ -0,0 +1,19 @@
+package lesson13;
+
+import java.util.HashSet;
+import java.util.LinkedHashSet;
+
+public class Main2 {
+    public static void main(String[] args) {
+        LinkedHashSet<String> set = new LinkedHashSet<>();
+        set.add("qqq");
+        set.add("sss");
+        set.add("aaa");
+        set.add("www");
+        set.add("vvv");
+        set.add("aaa");
+        set.add("aaa");
+
+        System.out.println(set);
+    }
+}
Index: src/lesson13/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/Main1.java b/src/lesson13/Main1.java
new file mode 100644
--- /dev/null	(date 1623175848103)
+++ b/src/lesson13/Main1.java	(date 1623175848103)
@@ -0,0 +1,32 @@
+package lesson13;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
+public class Main1 {
+    public static void main(String[] args) {
+        ArrayList<Integer> numbers = new ArrayList<>();
+        numbers.add(4);
+        numbers.add(7);
+        numbers.add(9);
+        numbers.add(9);
+        numbers.add(9);
+        numbers.add(9);
+        numbers.add(9);
+
+        // перебор всего:
+        // 1. с помощью for (это для тех где есть индексы
+        for (int i=0;i<numbers.size();i++) {
+            System.out.println(numbers.get(i));
+        }
+        // 2. for each (для всех коллекций)
+        for(Integer num:numbers) {
+            System.out.println(num);
+        }
+        // 3. с помощью итератора (для всех коллекций)
+        for (Iterator<Integer> iter = numbers.iterator(); iter.hasNext();) {
+            System.out.println(iter.next());
+        }
+
+    }
+}
Index: src/lesson13/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/Test.java b/src/lesson13/Test.java
new file mode 100644
--- /dev/null	(date 1623174726454)
+++ b/src/lesson13/Test.java	(date 1623174726454)
@@ -0,0 +1,39 @@
+package lesson13;
+
+import java.util.ArrayList;
+import java.util.LinkedList;
+
+public class Test {
+    public static void main(String[] args) {
+        ArrayList<String> list = new ArrayList<>();
+        LinkedList<String> linked = new LinkedList<>();
+
+        long startTime1 = System.currentTimeMillis();
+        for (int i = 0; i < 100000; i++) {
+            list.add("asdasdas" + i);
+        }
+        long endTime1 = System.currentTimeMillis();
+        System.out.println("Время выполнения add ArrayList: " + (endTime1 - startTime1));
+
+        long startTime2 = System.currentTimeMillis();
+        for (int i = 0; i < 100000; i++) {
+            linked.add("asdasdas" + i);
+        }
+        long endTime2 = System.currentTimeMillis();
+        System.out.println("Время выполнения add LinkedList: " + (endTime2 - startTime2));
+
+        long startTime3 = System.currentTimeMillis();
+        for (int i = 0; i < 100000; i++) {
+            list.get(i);
+        }
+        long endTime3 = System.currentTimeMillis();
+        System.out.println("Время выполнения метода Get ArrayList: " + (endTime3 - startTime3));
+
+        long startTime4 = System.currentTimeMillis();
+        for (int i = 0; i < 100000; i++) {
+            linked.get(i);
+        }
+        long endTime4 = System.currentTimeMillis();
+        System.out.println("Время выполнения метода Get LinkedList: " + (endTime4 - startTime4));
+    }
+}
Index: src/lesson13/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson13/Main.java b/src/lesson13/Main.java
new file mode 100644
--- /dev/null	(date 1623172790293)
+++ b/src/lesson13/Main.java	(date 1623172790293)
@@ -0,0 +1,24 @@
+package lesson13;
+
+import java.util.ArrayList;
+import java.util.LinkedList;
+
+public class Main {
+    public static void main(String[] args) {
+        ArrayList<Integer> numbers = new ArrayList<>();
+        numbers.add(4);
+        numbers.add(7);
+        numbers.add(9);
+        numbers.add(3, 1);
+        numbers.set(0,555);
+        System.out.println(numbers);
+
+        LinkedList<Integer> numbers2 = new LinkedList<>();
+        numbers2.add(4);
+        numbers2.add(7);
+        numbers2.add(9);
+        numbers2.add(3,1);
+        numbers2.set(0,555);
+        System.out.println(numbers2);
+    }
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1624472598990)
+++ b/.idea/vcs.xml	(date 1624472598990)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/lesson10/interfaces/FractionNumberImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/interfaces/FractionNumberImpl.java b/src/lesson10/interfaces/FractionNumberImpl.java
new file mode 100644
--- /dev/null	(date 1622742150005)
+++ b/src/lesson10/interfaces/FractionNumberImpl.java	(date 1622742150005)
@@ -0,0 +1,69 @@
+package lesson10.interfaces;
+
+import java.util.Objects;
+
+public class FractionNumberImpl implements FractionNumber {
+    private int dividend;
+    private int divisor;
+
+    public FractionNumberImpl() {
+    }
+
+    public FractionNumberImpl(int dividend, int divisor) {
+        this.dividend = dividend;
+        this.divisor = divisor;
+    }
+
+    @Override
+    public void setDividend(int dividend) {
+        this.dividend = dividend;
+    }
+
+    @Override
+    public int getDividend() {
+        return dividend;
+    }
+
+    @Override
+    public void setDivisor(int divisor) throws IllegalArgumentException {
+        this.divisor = divisor;
+    }
+
+    @Override
+    public int getDivisor() {
+        return divisor;
+    }
+
+    @Override
+    public double value() {
+        return dividend / (double) divisor;
+    }
+
+    public void sokrashenie() {
+        // 5\15 и 2\16 и 3\9
+        for (int i = Math.min(dividend, divisor); i >=2; i--) {
+            if (dividend%i==0 && divisor%i==0) {
+                dividend=dividend/i;
+                divisor=divisor/i;
+            }
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        FractionNumberImpl that = (FractionNumberImpl) o;
+        return dividend == that.dividend && divisor == that.divisor;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(dividend, divisor);
+    }
+
+    @Override
+    public String toString() {
+        return dividend + "/" + divisor;
+    }
+}
Index: src/lesson10/interfaces/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/interfaces/Main1.java b/src/lesson10/interfaces/Main1.java
new file mode 100644
--- /dev/null	(date 1622741434681)
+++ b/src/lesson10/interfaces/Main1.java	(date 1622741434681)
@@ -0,0 +1,12 @@
+package lesson10.interfaces;
+
+public class Main1 {
+    public static void main(String[] args) {
+        FractionNumberImpl drob1 = new FractionNumberImpl(1,5);
+        FractionNumberImpl drob2 = new FractionNumberImpl(3, 5);
+
+        FractionNumberOperationImpl calculator = new FractionNumberOperationImpl();
+        FractionNumber resultAdd =  calculator.add(drob1, drob2);
+        System.out.println(resultAdd);
+    }
+}
Index: src/lesson10/interfaces/FractionNumberOperationImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson10/interfaces/FractionNumberOperationImpl.java b/src/lesson10/interfaces/FractionNumberOperationImpl.java
new file mode 100644
--- /dev/null	(date 1622742390227)
+++ b/src/lesson10/interfaces/FractionNumberOperationImpl.java	(date 1622742390227)
@@ -0,0 +1,29 @@
+package lesson10.interfaces;
+
+public class FractionNumberOperationImpl implements FractionNumberOperation {
+
+    @Override
+    public FractionNumber add(FractionNumber a, FractionNumber b) throws NullPointerException {
+        int resultDividend = a.getDividend() * b.getDivisor()
+                             + a.getDivisor() * b.getDividend();
+        int resultDivisor = a.getDivisor() * b.getDivisor();
+        FractionNumberImpl result = new FractionNumberImpl(resultDividend, resultDivisor);
+        result.sokrashenie();
+        return result;
+    }
+
+    @Override
+    public FractionNumber sub(FractionNumber a, FractionNumber b) throws NullPointerException {
+        return null;
+    }
+
+    @Override
+    public FractionNumber mul(FractionNumber a, FractionNumber b) throws NullPointerException {
+        return null;
+    }
+
+    @Override
+    public FractionNumber div(FractionNumber a, FractionNumber b) throws NullPointerException, ArithmeticException {
+        return null;
+    }
+}
Index: src/lesson12/IMatrix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/IMatrix.java b/src/lesson12/IMatrix.java
new file mode 100644
--- /dev/null	(date 1622742390231)
+++ b/src/lesson12/IMatrix.java	(date 1622742390231)
@@ -0,0 +1,159 @@
+package lesson12;
+
+/**
+ * Интерфейс работы с матрицами
+ * 
+ * @author nedis
+ * @version 1.0
+ */
+public interface IMatrix {
+	
+	/**
+	 * Размер матрицы для конструктора без параметров
+	 */
+	int DEFAULT_MATRIX_SIZE = 1;
+	
+	/**
+	 * Возвращает количество строк матрицы
+	 * 
+	 * @return количесвто строк матрицы
+	 */
+	int getRows ();
+	
+	/**
+	 * Возвращает количество столбцов матрицы
+	 * 
+	 * @return количество столбцов матрицы
+	 */
+	int getColumns ();
+	
+	/**
+	 * Возвращает элемент матрицы по индексам
+	 * 
+	 * @param rowIndex индекс строки 
+	 * @param colIndex индекс столбца
+	 * @return элемент матрицы по индексам
+	 * @throws IndexOutOfBoundsException если индекс строки меньше нуля или больше (или равно) количества строк матрицы
+	 * 			или индекс столбца меньше нуля или больше (или равно) количества столбцов матрицы
+	 */
+	double getValueAt (int rowIndex, int colIndex) throws IndexOutOfBoundsException;
+	
+	/**
+	 * Устанавливает элемент матрицы по индексам
+	 * 
+	 * @param rowIndex индекс строки 
+	 * @param colIndex индекс столбца
+	 * @param value новое значение элемента
+	 * @throws IndexOutOfBoundsException если индекс строки меньше нуля или больше (или равно) количества строк матрицы
+	 * 			или индекс столбца меньше нуля или больше (или равно) количества столбцов матрицы
+	 */
+	void setValueAt (int rowIndex, int colIndex, double value) throws IndexOutOfBoundsException;
+	
+	/**
+	 * Возвращает сумму текущей матрицы и второго аргумента. <br/>
+	 * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b>
+	 * 
+	 * @param otherMatrix второй аргумент (матрица)
+	 * @return сумма матриц <b><i>(новый объект матрицы)</i></b>
+	 * @throws IllegalArgumentException если текущая матрица и второй аргумент имеют несовместимое количество строк и (или) столбцов
+	 * @throws NullPointerException если второй аргумент null
+	 */
+	IMatrix add (IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException;
+	
+	/**
+	 * Возвращает разность текущей матрицы и второго аргумента.<br/>
+	 * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b> 
+	 * 
+	 * @param otherMatrix второй аргумент (матрица)
+	 * @return разность матриц <b><i>(новый объект матрицы)</i></b>
+	 * @throws IllegalArgumentException если текущая матрица и второй аргумент имеют несовместимое количество строк и (или) столбцов
+	 * @throws NullPointerException если второй аргумент null
+	 */
+	IMatrix sub (IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException;
+	
+	/**
+	 * Возвращает произведение текущей матрицы и второго аргумента.<br/>
+	 * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b> 
+	 * 
+	 * @param otherMatrix второй аргумент (матрица)
+	 * @return произведение матриц <b><i>(новый объект матрицы)</i></b>
+	 * @throws IllegalArgumentException если текущая матрица и второй аргумент имеют несовместимое количество строк и (или) столбцов
+	 * @throws NullPointerException если второй аргумент null
+	 */
+	IMatrix mul (IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException;
+	
+	/**
+	 * Возвращает произведение текущей матрицы на число.<br/>
+	 * <b><i>(После выполнения функции текущая матрица не должна быть изменена! Результат операции - новый объект матрицы) </i></b>
+	 * 
+	 * @param value число
+	 * @return произведение <b><i>(новый объект матрицы)</i></b>
+	 */
+	IMatrix mul (double value);
+	
+	/**
+	 * Возвращает транспонированную матрицу по отношению к текущей
+	 * 
+	 * @return транспонированная матрица по отношению к текущей
+	 */
+	IMatrix transpose();
+	
+	/**
+	 * Заполняет текущю матрицу заднным значением
+	 * 
+	 * @param value значение
+	 */
+	void fillMatrix (double value);
+	
+	/**
+	 * Вычисляет детерминант матрицы.<br/>
+	 * Описание алгоритма для любой матрицы тут: <a target="_blank" href="http://ru.wikipedia.org/wiki/LU-%D1%80%D0%B0%D0%B7%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5">LU-разложение</a>
+	 * 
+	 * @return детерминант
+	 */
+	double determinant();
+	
+	/**
+	 * Проверяет является ли текущая матрица нулевой<br/>
+	 * Нулевая матрица - матрица у которой все элементы нули:
+	 * 
+	 * <table>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * </table>
+	 * 
+	 * @return <b>true</b> если текущая матрица нулевая
+	 */
+	boolean isNullMatrix();
+	
+	/**
+	 * Проверяет является ли текущая матрица единичной<br/>
+	 * Единичная матрица - матрица у которой на главной диагонали единицы, а остальные элементы нули:
+	 * 
+	 * <table>
+	 * <tr><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td></tr>
+	 * <tr><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;0&nbsp;&nbsp;</td><td>&nbsp;&nbsp;1&nbsp;&nbsp;</td></tr>
+	 * </table>
+	 * 
+	 * @return <b>true</b> если текущая матрица единичная
+	 */
+	boolean isIdentityMatrix();
+	
+	/**
+	 * Проверяет является ли текущая матрица квадратной. <br/>
+	 * Т.е. матрица у которой количество строк равно количеству столбцов<br/>
+	 * 
+	 * @return <b>true</b> если текущая матрица квадратная
+	 */
+	boolean isSquareMatrix ();
+	
+	/**
+	 * Вывод матрицу на консоль
+	 * @see System.out.println()
+	 */
+	void printToConsole ();
+}
Index: src/lesson12/Matrix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/Matrix.java b/src/lesson12/Matrix.java
new file mode 100644
--- /dev/null	(date 1622745461961)
+++ b/src/lesson12/Matrix.java	(date 1622745461961)
@@ -0,0 +1,116 @@
+package lesson12;
+
+public class Matrix implements IMatrix {
+    private double[][] matrix;
+
+    public Matrix() {
+    }
+
+    public Matrix(int rows, int calumn) {
+        matrix = new double[rows][calumn];
+    }
+
+    @Override
+    public int getRows() {
+        return matrix.length;
+    }
+
+    @Override
+    public int getColumns() {
+        return matrix[0].length;
+    }
+
+    @Override
+    public double getValueAt(int rowIndex, int colIndex) throws IndexOutOfBoundsException {
+        if (rowIndex >= getRows()) {
+            System.out.println("Слишком большой индекс строки");
+            return -1;
+        }
+        if (colIndex >= getRows()) {
+            System.out.println("Слишком большой индекс столбца");
+            return -1;
+        }
+        return matrix[rowIndex][colIndex];
+    }
+
+    @Override
+    public void setValueAt(int rowIndex, int colIndex, double value) throws IndexOutOfBoundsException {
+        if (rowIndex >= getRows()) {
+            System.out.println("Слишком большой индекс строки");
+            return;
+        }
+        if (colIndex >= getRows()) {
+            System.out.println("Слишком большой индекс столбца");
+            return;
+        }
+        matrix[rowIndex][colIndex] = value;
+    }
+
+    @Override
+    public IMatrix add(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException {
+        Matrix result = new Matrix(otherMatrix.getRows(), otherMatrix.getColumns());
+        for (int i = 0; i < result.getRows(); i++) {
+            for (int j = 0; j < result.getColumns(); j++) {
+                result.setValueAt(i,j,this.getValueAt(i,j) + otherMatrix.getValueAt(i,j));
+            }
+        }
+        return result;
+    }
+
+    @Override
+    public IMatrix sub(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException {
+        return null;
+    }
+
+    @Override
+    public IMatrix mul(IMatrix otherMatrix) throws IllegalArgumentException, NullPointerException {
+        return null;
+    }
+
+    @Override
+    public IMatrix mul(double value) {
+        return null;
+    }
+
+    @Override
+    public IMatrix transpose() {
+        return null;
+    }
+
+    @Override
+    public void fillMatrix(double value) {
+
+    }
+
+    @Override
+    public double determinant() {
+        return 0;
+    }
+
+    @Override
+    public boolean isNullMatrix() {
+        for (int i = 0; i < matrix.length; i++) {
+            for (int j = 0; j < matrix[0].length; j++) {
+                if (matrix[i][j] != 0.0) {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public boolean isIdentityMatrix() {
+        return false;
+    }
+
+    @Override
+    public boolean isSquareMatrix() {
+        return false;
+    }
+
+    @Override
+    public void printToConsole() {
+
+    }
+}
Index: src/lesson12/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson12/Main.java b/src/lesson12/Main.java
new file mode 100644
--- /dev/null	(date 1622745627292)
+++ b/src/lesson12/Main.java	(date 1622745627292)
@@ -0,0 +1,39 @@
+package lesson12;
+
+public class Main {
+    public static void main(String[] args) {
+        Matrix matrix1 = new Matrix(3, 3);
+//        System.out.println(matrix.getRows());
+//        System.out.println(matrix.getColumns());
+//        System.out.println(matrix.getValueAt(0, 1));
+
+        matrix1.setValueAt(0, 0, 1);
+        matrix1.setValueAt(0, 1, 2);
+        matrix1.setValueAt(0, 2, 3);
+
+        matrix1.setValueAt(1, 0, 1);
+        matrix1.setValueAt(1, 1, 2);
+        matrix1.setValueAt(1, 2, 3);
+
+        matrix1.setValueAt(2, 0, 1);
+        matrix1.setValueAt(2, 1, 2);
+        matrix1.setValueAt(2, 2, 3);
+
+        Matrix matrix2 = new Matrix(3, 3);
+
+        matrix2.setValueAt(0, 0, 1);
+        matrix2.setValueAt(0, 1, 2);
+        matrix2.setValueAt(0, 2, 3);
+
+        matrix2.setValueAt(1, 0, 1);
+        matrix2.setValueAt(1, 1, 2);
+        matrix2.setValueAt(1, 2, 3);
+
+        matrix2.setValueAt(2, 0, 1);
+        matrix2.setValueAt(2, 1, 2);
+        matrix2.setValueAt(2, 2, 3);
+
+        IMatrix result = matrix2.add(matrix1);
+
+    }
+}
Index: src/homework/lesson8/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework/lesson8/Main.java b/src/homework/lesson8/Main.java
new file mode 100644
--- /dev/null	(date 1622547079893)
+++ b/src/homework/lesson8/Main.java	(date 1622547079893)
@@ -0,0 +1,35 @@
+package homework.lesson8;
+
+import java.util.ArrayList;
+
+public class Main {
+
+    public static void main(String[] args) {
+
+        Telephone phone1 = new Telephone(6.4f, "A14 Bionic", 4, "Phone 1", "Apple");
+        Telephone phone2 = new Telephone(5f, "A12 Bionic", 3, "Phone 2", "Apple");
+        Telephone phone3 = new Telephone(5.3f, "A13 Bionic", 5, "Phone 3", "Apple");
+        Telephone phone4 = new Telephone(4f, "Snapdragon 888", 4, "Phone 4", "Samsung");
+        Telephone phone5 = new Telephone(5f, "Exynos 2100", 4, "Phone 5", "Samsung");
+        Telephone phone6 = new Telephone(4f, "Kirin 9000", 4, "Phone 6", "Samsung");
+        Telephone phone7 = new Telephone(7.1f, "Snapdragon 870", 5, "Phone 7", "Xiaomi");
+        Telephone phone8 = new Telephone(5.2f, "Exynos 1080", 6, "Phone 8", "Xiaomi");
+        Telephone phone9 = new Telephone(5.3f, "Snapdragon 865", 4, "Phone 9", "LG");
+        Telephone phone10 = new Telephone(5.4f, "Kirin 9000E", 3, "Phone 10", "LG");
+
+
+//        phones.add(phone1);
+//        phones.add(phone2);
+//        phones.add(phone3);
+//        phones.add(phone4);
+//        phones.add(phone5);
+//        phones.add(phone6);
+//        phones.add(phone7);
+//        phones.add(phone8);
+//        phones.add(phone9);
+//        phones.add(phone10);
+//
+////        TelephoneUtils.printAllPhonesByProduction(phones, "Apple");
+//        System.out.println(phones[0].getManufacturer());
+    }
+}
Index: src/lesson8/blackjack/Coloda.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson8/blackjack/Coloda.java b/src/lesson8/blackjack/Coloda.java
new file mode 100644
--- /dev/null	(date 1622135608736)
+++ b/src/lesson8/blackjack/Coloda.java	(date 1622135608736)
@@ -0,0 +1,136 @@
+package lesson8.blackjack;
+
+import java.util.ArrayList;
+import java.util.concurrent.ThreadLocalRandom;
+
+public class Coloda {
+    private ArrayList<Card> cards = new ArrayList<>();//создали бзраамрный массив
+
+    public Coloda() {
+        Card card1 = new Card("2 трефа", 2);
+        Card card2 = new Card("2 червей", 2);
+        Card card3 = new Card("2 пика", 2);
+        Card card4 = new Card("2 буба", 2);
+
+        Card card5 = new Card("3 трефа", 3);
+        Card card6 = new Card("3 червей", 3);
+        Card card7 = new Card("3 пика", 3);
+        Card card8 = new Card("3 буба", 3);
+
+        Card card9 = new Card("4 трефа", 4);
+        Card card10 = new Card("4 червей", 4);
+        Card card11 = new Card("4 пика", 4);
+        Card card12 = new Card("4 буба", 4);
+
+        Card card13 = new Card("5 трефа", 5);
+        Card card14 = new Card("5 червей", 5);
+        Card card15 = new Card("5 пика", 5);
+        Card card16 = new Card("5 буба", 5);
+
+        Card card17 = new Card("6 трефа", 6);
+        Card card18 = new Card("6 червей", 6);
+        Card card19 = new Card("6 пика", 6);
+        Card card20 = new Card("6 буба", 6);
+
+        Card card21 = new Card("7 трефа", 7);
+        Card card22 = new Card("7 червей", 7);
+        Card card23 = new Card("7 пика", 7);
+        Card card24 = new Card("7 буба", 7);
+
+        Card card25 = new Card("8 трефа", 8);
+        Card card26 = new Card("8 червей", 8);
+        Card card27 = new Card("8 пика", 8);
+        Card card28 = new Card("8 буба", 8);
+
+        Card card29 = new Card("9 трефа", 9);
+        Card card30 = new Card("9 червей", 9);
+        Card card31 = new Card("9 пика", 9);
+        Card card32 = new Card("9 буба", 9);
+
+        Card card33 = new Card("10 трефа", 10);
+        Card card34 = new Card("10 червей", 10);
+        Card card35 = new Card("10 пика", 10);
+        Card card36 = new Card("10 буба", 10);
+
+        Card card37 = new Card("валет трефа", 10);
+        Card card38 = new Card("валет червей", 10);
+        Card card39 = new Card("валет пика", 10);
+        Card card40 = new Card("валет буба", 10);
+
+        Card card41 = new Card("дама трефа", 10);
+        Card card42 = new Card("дама червей", 10);
+        Card card43 = new Card("дама пика", 10);
+        Card card44 = new Card("дама буба", 10);
+
+        Card card45 = new Card("король трефа", 10);
+        Card card46 = new Card("кооль червей", 10);
+        Card card47 = new Card("король пика", 10);
+        Card card48 = new Card("король буба", 10);
+
+        Card card49 = new Card("туз трефа", 1);
+        Card card50 = new Card("туз червей", 1);
+        Card card51 = new Card("туз пика", 1);
+        Card card52 = new Card("туз буба", 1);
+
+        cards.add(card1);
+        cards.add(card2);
+        cards.add(card3);
+        cards.add(card4);
+        cards.add(card5);
+        cards.add(card6);
+        cards.add(card7);
+        cards.add(card8);
+        cards.add(card9);
+        cards.add(card10);
+        cards.add(card11);
+        cards.add(card12);
+        cards.add(card13);
+        cards.add(card14);
+        cards.add(card15);
+        cards.add(card16);
+        cards.add(card17);
+        cards.add(card18);
+        cards.add(card19);
+        cards.add(card20);
+        cards.add(card21);
+        cards.add(card22);
+        cards.add(card23);
+        cards.add(card24);
+        cards.add(card25);
+        cards.add(card26);
+        cards.add(card27);
+        cards.add(card28);
+        cards.add(card29);
+        cards.add(card30);
+        cards.add(card31);
+        cards.add(card32);
+        cards.add(card33);
+        cards.add(card34);
+        cards.add(card35);
+        cards.add(card36);
+        cards.add(card37);
+        cards.add(card38);
+        cards.add(card39);
+        cards.add(card40);
+        cards.add(card41);
+        cards.add(card42);
+        cards.add(card43);
+        cards.add(card44);
+        cards.add(card45);
+        cards.add(card46);
+        cards.add(card47);
+        cards.add(card48);
+        cards.add(card49);
+        cards.add(card50);
+        cards.add(card51);
+        cards.add(card52);
+
+
+    }
+
+    public Card randomCard() {
+        int randomNum = ThreadLocalRandom.current().nextInt(0, 52);
+        return cards.get(randomNum);
+    }
+
+}
Index: src/lesson2/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/Main1.java b/src/lesson2/Main1.java
new file mode 100644
--- /dev/null	(date 1620147634173)
+++ b/src/lesson2/Main1.java	(date 1620147634173)
@@ -0,0 +1,14 @@
+package lesson2;
+
+public class Main1 {
+    public static void main(String[] args) {
+        int number = 222;
+        int newNumber = number % 2;
+
+        if (newNumber == 1) {
+            System.out.println("Не четное");
+        } else {
+            System.out.println("Четное");
+        }
+    }
+}
Index: src/lesson2/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/Main2.java b/src/lesson2/Main2.java
new file mode 100644
--- /dev/null	(date 1620148287090)
+++ b/src/lesson2/Main2.java	(date 1620148287090)
@@ -0,0 +1,18 @@
+package lesson2;
+
+public class Main2 {
+    public static void main(String[] args) {
+        int mark = 4;
+        if (mark == 5) {
+            System.out.println("Молодец");
+        } else if (mark == 4) {
+            System.out.println("Не плохо!");
+        } else if (mark == 3) {
+            System.out.println("Ну тоже не плохо");
+        } else if (mark == 2) {
+            System.out.println("Двоечник!");
+        } else {
+            System.out.println("Ах ты колымщик!");
+        }
+    }
+}
Index: src/lesson2/Main4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/Main4.java b/src/lesson2/Main4.java
new file mode 100644
--- /dev/null	(date 1620149914803)
+++ b/src/lesson2/Main4.java	(date 1620149914803)
@@ -0,0 +1,23 @@
+package lesson2;
+
+public class Main4 {
+    public static void main(String[] args) {
+        int mark = 4;
+        switch (mark) {
+            case 5:
+                System.out.println("Отлично");
+                break;
+            case 4:
+                System.out.println("Хорошо");
+                break;
+            case 3:
+                System.out.println("Не айс");
+                break;
+            case 2:
+                System.out.println("Двоечник");
+                break;
+            default:
+                System.out.println("Это не оценка");
+        }
+    }
+}
Index: src/lesson2/Main5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/Main5.java b/src/lesson2/Main5.java
new file mode 100644
--- /dev/null	(date 1620502631358)
+++ b/src/lesson2/Main5.java	(date 1620502631358)
@@ -0,0 +1,26 @@
+package lesson2;
+
+import java.util.Scanner;
+
+public class Main5 {
+    public static void main(String[] args) {
+        System.out.println("Введите первую сторону треугольника");
+        Scanner scanner = new Scanner(System.in);
+        int a = scanner.nextInt();
+        System.out.println("Введите вторую сторону треугольника");
+        int b = scanner.nextInt();
+        System.out.println("Введите третью сторону треугольника");
+        int c = scanner.nextInt();
+
+        if (a + b > c || a + c > b || b + c > a) {
+            System.out.println("Нет такого треугольника");
+            return;
+        }
+
+        System.out.println("Периметр треугольника:" + (a + b + c));
+
+        double p = (a + b + c) / 2;
+        double s = Math.sqrt(p * (p - a) * (p - b) * (p - c));
+        System.out.println("Площадь теругольника:" + s);
+    }
+}
Index: src/lesson2/Main3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson2/Main3.java b/src/lesson2/Main3.java
new file mode 100644
--- /dev/null	(date 1620149142380)
+++ b/src/lesson2/Main3.java	(date 1620149142380)
@@ -0,0 +1,16 @@
+package lesson2;
+
+public class Main3 {
+    public static void main(String[] args) {
+        int a = 3;
+        int b = 2;
+        int c = 2;
+        if (a == b && b == c && c == a) {
+            System.out.println("Равносторонний");
+        } else if (a == b || b == c || c == a) {
+            System.out.println("Равнобедренный");
+        } else {
+            System.out.println("Другой");
+        }
+    }
+}
Index: src/lesson6/StringUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson6/StringUtils.java b/src/lesson6/StringUtils.java
new file mode 100644
--- /dev/null	(date 1621365558803)
+++ b/src/lesson6/StringUtils.java	(date 1621365558803)
@@ -0,0 +1,65 @@
+package lesson6;
+
+public class StringUtils {
+    //1 - модификатор доступа (один из четырёх):
+    //public - доступен внутри всего проекта (проект - это весь проект, javaJunior-1)
+    //       (пустой) - доступ внутри проекта (lesson6 - это пакет) и наследники
+    //protected - доступ внутрикласса и наследникам
+    //private - доступен только внутри класса
+//2 - слово static (есть или нет) (Если не к кому нельзя обратиться, то без слова)
+//3 - возвращаемый тип (указываем тип) или void, если метод ничего не возвращает
+//4 - Название метода (с маленькой буквы)
+//5 - входящие параметры (всегда в круглых скобках)
+//6 - тело выполнения метода
+    public static int countSpacesInText(String text) {
+        char[] charsFromText = text.toCharArray();
+        int summ = 0;
+        for (int i = 0; i < charsFromText.length; i++) {
+            if (charsFromText[i] == ' ') {
+                summ++;
+            }
+        }
+        return summ; //Возврат этого
+    }
+
+    public static String recplaeGlassToUppercase(String text) {
+        //text= "Prived medved!"
+        for (int i = 0; i < text.length(); i++) {
+            if (text.charAt(i) == 'i') {
+                text = text.replace('i', 'I');
+            }
+            if (text.charAt(i) == 'a') {
+                text = text.replace('a', 'A');
+            }
+            if (text.charAt(i) == 'e') {
+                text = text.replace('e', 'E');
+            }
+            if (text.charAt(i) == 'o') {
+                text = text.replace('o', 'O');
+            }
+        }
+        return text;
+    }
+
+    public static void printSlovaZadomNaPered(String text) {
+        //Privet medved!
+        String[] textPoslePereborki = text.split(" ");
+        for (int i = textPoslePereborki.length - 1; i >= 0; i--) {
+            System.out.println(textPoslePereborki[i]);
+        }
+    }
+
+    public static void containtSymbolOfText (String text, String symbols) {
+        int ammountOfNumbers = 0;
+        for (int i = 0; i < symbols.length(); i++) {
+            if (text.contains(symbols.charAt(i)+"")) {
+                ammountOfNumbers++;
+            }
+        }
+        if (ammountOfNumbers>0)
+            System.out.println("Содержит " + ammountOfNumbers + " символов");
+         else
+            System.out.println("Не содержит символов");
+
+    }
+}
Index: src/lesson6/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson6/Main.java b/src/lesson6/Main.java
new file mode 100644
--- /dev/null	(date 1621365627169)
+++ b/src/lesson6/Main.java	(date 1621365627169)
@@ -0,0 +1,17 @@
+package lesson6;
+
+public class Main {
+    public static void main(String[] args) {
+//        int count = StringUtils.countSpacesInText("sghs gh dspg hdspg hsdpgh dsopg ");
+//        System.out.println("Пробелов в фразе: " + count);
+//
+//        String text = StringUtils.recplaeGlassToUppercase("Prived Medved!");
+//        System.out.println(text);
+
+        NumberUtils.printSmallNumber2(1,2,1,3);
+
+//        StringUtils.printSlovaZadomNaPered("Prived Medved!");
+
+        StringUtils.containtSymbolOfText("ja389ha309t8", "<!-=");
+    }
+}
Index: src/lesson5/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/Main2.java b/src/lesson5/Main2.java
new file mode 100644
--- /dev/null	(date 1621084806849)
+++ b/src/lesson5/Main2.java	(date 1621084806849)
@@ -0,0 +1,21 @@
+package lesson5;
+
+public class Main2 {
+    public static void main(String[] args) {
+        int[][] numbers = {
+                {1, 2, 3, 4},
+                {5, 6, 7, 8},
+                {9, 10, 11, 12}
+        };
+        for (int i = 0; i < numbers.length; i++) {
+            for (int j = 0; j < numbers[i].length; j++) {
+                if (numbers[i][j] % 2 == 0) {
+                    System.out.print(numbers[i][j] + " ");
+                } else {
+                    System.out.println("  ");
+                }
+            }
+            System.out.println();
+        }
+    }
+}
Index: src/lesson5/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/Main1.java b/src/lesson5/Main1.java
new file mode 100644
--- /dev/null	(date 1621084184607)
+++ b/src/lesson5/Main1.java	(date 1621084184607)
@@ -0,0 +1,33 @@
+package lesson5;
+
+public class Main1 {
+    public static void main(String[] args) {
+        int[][] numbers = {
+                {1, 2, 3, 4},
+                {5, 6, 7, 8},
+                {9, 10, 11, 12}
+        };
+        System.out.print(numbers[0][0] + " ");
+        System.out.print(numbers[0][1] + " ");
+        System.out.print(numbers[0][2] + " ");
+        System.out.print(numbers[0][3] + " \n");
+
+        System.out.print(numbers[1][0] + " ");
+        System.out.print(numbers[1][1] + " ");
+        System.out.print(numbers[1][2] + " ");
+        System.out.print(numbers[1][3] + " \n");
+
+        System.out.print(numbers[2][0] + " ");
+        System.out.print(numbers[2][1] + " ");
+        System.out.print(numbers[2][2] + " ");
+        System.out.print(numbers[2][3] + " \n");
+
+
+        for (int i = 0; i < numbers.length; i++) {
+            for (int j = 0; j < numbers[i].length; j++) {
+                System.out.print(numbers[i][j] + " ");
+            }
+            System.out.println();
+        }
+    }
+}
Index: src/lesson5/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/Main.java b/src/lesson5/Main.java
new file mode 100644
--- /dev/null	(date 1621082539818)
+++ b/src/lesson5/Main.java	(date 1621082539818)
@@ -0,0 +1,18 @@
+package lesson5;
+
+public class Main {
+    public static void main(String[] args) throws InterruptedException {
+        for (int year = 0; year < 10; year++) {
+            for (int day = 0; day < 365; day++) {
+                for (int hour = 0; hour < 24; hour++) {
+                    for (int minutes = 0; minutes < 60; minutes++) {
+                        for (int seconds = 0; seconds < 60; seconds++) {
+                            System.out.printf("Со старта прошло: %d лет, %d дня, %d часа, %d минут, %d секунд \n", year, day, hour, minutes, seconds); // %d - числы, %s - стринг
+                            Thread.sleep(1000); // управление потока
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
Index: src/lesson4/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/Main2.java b/src/lesson4/Main2.java
new file mode 100644
--- /dev/null	(date 1620753807293)
+++ b/src/lesson4/Main2.java	(date 1620753807293)
@@ -0,0 +1,12 @@
+package lesson4;
+
+public class Main2 {
+    public static void main(String[] args) {
+        int[] numbers = {7, 1, 4, 8, 11};
+
+        for (int i = 0; i < numbers.length; i++) {
+            if (numbers[i] % 2 == 0)
+                System.out.println(numbers[i]);
+        }
+    }
+}
Index: src/lesson4/Main3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/Main3.java b/src/lesson4/Main3.java
new file mode 100644
--- /dev/null	(date 1620754544457)
+++ b/src/lesson4/Main3.java	(date 1620754544457)
@@ -0,0 +1,12 @@
+package lesson4;
+
+public class Main3 {
+    public static void main(String[] args) {
+        String text = "Test string";
+
+        System.out.println("Длинна текста: " + text.length());
+
+        String newxText = text.replace('T', 't');
+        System.out.println("New text: " + newxText);
+    }
+}
Index: src/lesson4/Main4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/Main4.java b/src/lesson4/Main4.java
new file mode 100644
--- /dev/null	(date 1620918433433)
+++ b/src/lesson4/Main4.java	(date 1620918433433)
@@ -0,0 +1,13 @@
+package lesson4;
+
+public class Main4 {
+    public static void main(String[] args) {
+        String text = "Chto-to";
+
+        char[] symbolsFromText = text.toCharArray();
+
+        for (int i = symbolsFromText.length - 1;i >=0;i-- ) {
+            System.out.print(symbolsFromText[i]);
+        }
+    }
+}
Index: src/lesson4/Main5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/Main5.java b/src/lesson4/Main5.java
new file mode 100644
--- /dev/null	(date 1620756648183)
+++ b/src/lesson4/Main5.java	(date 1620756648183)
@@ -0,0 +1,36 @@
+package lesson4;
+
+public class Main5 {
+    public static void main(String[] args) {
+        String email = "bgi3t@@biat.ru";
+
+        String[] partsOfEmail = email.split("@");
+
+        if (partsOfEmail.length==1) {
+            System.out.println("No Dog");
+            return;
+        }
+
+        if (partsOfEmail.length>2) {
+            System.out.println("Больше двух собак");
+            return;
+        }
+
+        if (partsOfEmail[0].startsWith(".") || partsOfEmail[0].endsWith(".")) {
+            System.out.println("Точка в начале или в конце имени почты");
+            return;
+        }
+
+        if (partsOfEmail[1].startsWith(".") || partsOfEmail[1].endsWith(".")) {
+            System.out.println("Точка в начале или в конце домена почты");
+            return;
+        }
+
+        if (partsOfEmail[1].indexOf(".") == -1) {
+            System.out.println("This is not a domain");
+            return;
+        }
+
+        System.out.println("The mail is correct");
+    }
+}
Index: src/lesson4/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/Test.java b/src/lesson4/Test.java
new file mode 100644
--- /dev/null	(date 1620991911585)
+++ b/src/lesson4/Test.java	(date 1620991911585)
@@ -0,0 +1,26 @@
+package lesson4;
+
+import java.util.Arrays;
+
+public class Test {
+    public static void main(String[] args) {
+        int[] numbers = {3, 5, 8, 3, 55, 4, 1, 65, 36, 98, 57};
+        String result = Arrays.toString(numbers);
+        result = result.replaceAll("[^0-9 ]", "");
+        String[] partsOfNumbers = result.split(" ");
+
+
+        for (int i = 0; i < partsOfNumbers.length; i++) {
+            if (partsOfNumbers[i].startsWith("5") || partsOfNumbers[i].endsWith("5")) {
+                System.out.println(partsOfNumbers[i]);
+            }
+        }
+
+
+//        System.out.print("\n\nВывести на консоль те числа, которые содержат символ 5: ");
+//        for (int i = 0; i < numbers.length; i++) {
+//            if (numbers[i] % 5 == 0 || numbers[i] / 10 == 5)
+//                System.out.print(ansiUnderline + numbers[i] + ansiReset + " ");
+//        }
+    }
+}
Index: src/lesson4/Main6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/Main6.java b/src/lesson4/Main6.java
new file mode 100644
--- /dev/null	(date 1620758426453)
+++ b/src/lesson4/Main6.java	(date 1620758426453)
@@ -0,0 +1,21 @@
+package lesson4;
+
+public class Main6 {
+    public static void main(String[] args) {
+        String word = "hello world!";
+        String alphabat = "abcdefghijklmnopqrstuvwxyza";
+        String result = "";
+
+        for (int i = 0; i < word.length(); i++) {
+            char currentCharFromWord = word.charAt(i);
+            int indexFromAlphabat = alphabat.indexOf(currentCharFromWord);
+            if (indexFromAlphabat != -1) {
+                char replacementChar = alphabat.charAt(indexFromAlphabat + 1);
+                result = result + replacementChar;
+            } else {
+                result = result + currentCharFromWord;
+            }
+        }
+        System.out.println(result);
+    }
+}
Index: src/lesson4/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/Main1.java b/src/lesson4/Main1.java
new file mode 100644
--- /dev/null	(date 1620753559045)
+++ b/src/lesson4/Main1.java	(date 1620753559045)
@@ -0,0 +1,20 @@
+package lesson4;
+
+public class Main1 {
+    public static void main(String[] args) {
+//        int[] numbers = new int[10];
+//        for (int i = 0; i < numbers.length; i++) {
+//            for (int f = 2; f < numbers.length*2; f=f+2) {
+//                numbers[i] = f;
+//
+//                System.out.println(numbers[i]);
+//            }
+//        }
+        int[] numbers = new int[10];
+        int value = 2;
+        for (int i = 0; i < numbers.length; i++) {
+            value = value + 2;
+            System.out.println(numbers[i]);
+        }
+    }
+}
Index: src/lesson4/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson4/Main.java b/src/lesson4/Main.java
new file mode 100644
--- /dev/null	(date 1620752847280)
+++ b/src/lesson4/Main.java	(date 1620752847280)
@@ -0,0 +1,16 @@
+package lesson4;
+
+public class Main {
+    public static void main(String[] args) {
+        int numbers[] = new int[5];
+
+//        System.out.println(numbers[0]);
+//        System.out.println(numbers[1]);
+//        System.out.println(numbers[2]);
+//        System.out.println(numbers[3]);
+//        System.out.println(numbers[4]);
+        for (int i=0; i<numbers.length;i++) {
+            System.out.println(numbers[i]);
+        }
+    }
+}
Index: src/lesson6/NumberUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson6/NumberUtils.java b/src/lesson6/NumberUtils.java
new file mode 100644
--- /dev/null	(date 1621363031398)
+++ b/src/lesson6/NumberUtils.java	(date 1621363031398)
@@ -0,0 +1,35 @@
+package lesson6;
+
+import java.util.Arrays;
+
+public class NumberUtils {
+    public static void printSmallNumber(int num1, int num2, int num3, int num4) {
+        int[] num = {num1, num2, num3, num4};
+        int[] cloneNum = num.clone();
+        Arrays.sort(cloneNum);
+        System.out.println(cloneNum[0]);
+    }
+
+    // Вариант 2
+    public static void printSmallNumber2(int num1, int num2, int num3, int num4) {
+        int[] arr = {num1, num2, num3, num4};
+        int min = arr[0];
+        for (int i = 0; i < arr.length; i++) {
+            if (arr[i] < min) {
+                min = arr[i];
+            }
+        }
+        System.out.println(min);
+//        if (num1 < num2 && num1 < num3 && num1 < num4) {
+//            System.out.println(num1);
+//        } else if (num2 < num1 && num2 < num3 && num2 < num4) {
+//            System.out.println(num2);
+//        } else if (num3 < num1 && num3 < num2 && num3 < num4) {
+//            System.out.println(num2);
+//        } else if (num4 < num1 && num4 < num2 && num4 < num3) {
+//            System.out.println(num2);
+//        } else if (num1) {
+//            System.out.println("Нету самого меньшего числа");
+//        }
+    }
+}
Index: src/lesson5/Main5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/Main5.java b/src/lesson5/Main5.java
new file mode 100644
--- /dev/null	(date 1621088204247)
+++ b/src/lesson5/Main5.java	(date 1621088204247)
@@ -0,0 +1,22 @@
+package lesson5;
+
+import java.util.concurrent.ThreadLocalRandom;
+
+public class Main5 {
+    public static void main(String[] args) {
+        int[][] saper = new int[10][10];
+
+        for (int i = 0; i < 10; i++) {
+            int randomRow = ThreadLocalRandom.current().nextInt(0, saper.length);
+            int randomColumn = ThreadLocalRandom.current().nextInt(0, saper[0].length);
+            saper[randomRow][randomColumn] = -1;
+        }
+
+        for (int i=0;i< saper.length;i++) {
+            for (int j=0;j<saper[i].length;j++) {
+                System.out.print(saper[i][j] + "  ");
+            }
+            System.out.println();
+        }
+    }
+}
Index: src/lesson5/Main4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/Main4.java b/src/lesson5/Main4.java
new file mode 100644
--- /dev/null	(date 1621087372313)
+++ b/src/lesson5/Main4.java	(date 1621087372313)
@@ -0,0 +1,18 @@
+package lesson5;
+
+public class Main4 {
+    public static void main(String[] args) {
+        int[][] numbers = new int[6][6];
+
+        for (int i = 0; i < numbers.length; i++) {
+            for (int j = 0; j < numbers.length; j++) {
+                if (i == j || j < i) {
+                    System.out.print(numbers[i][j] + "  ");
+                } else {
+                    System.out.print("  ");
+                }
+            }
+            System.out.println();
+        }
+    }
+}
Index: src/lesson5/Main3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson5/Main3.java b/src/lesson5/Main3.java
new file mode 100644
--- /dev/null	(date 1621085890380)
+++ b/src/lesson5/Main3.java	(date 1621085890380)
@@ -0,0 +1,26 @@
+package lesson5;
+
+public class Main3 {
+    public static void main(String[] args) {
+        int[][] numbers = new int[5][5];
+
+        for (int i = 0; i < numbers.length; i++) {
+            for (int j = 0; j < numbers[i].length; j++) {
+                if (i % 2 == 0) {
+                    if (j % 2 == 0) {
+                        System.out.print(numbers[i][j] + " ");
+                    } else{
+                        System.out.print("  ");
+                    }
+                } else {
+                    if (j % 2 == 0) {
+                        System.out.print("  ");
+                    } else {
+                        System.out.print(numbers[i][j] + " ");
+                    }
+                }
+            }
+            System.out.println();
+        }
+    }
+}
Index: src/lesson7/Pen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lesson7/Pen.java b/src/lesson7/Pen.java
new file mode 100644
--- /dev/null	(date 1621699064304)
+++ b/src/lesson7/Pen.java	(date 1621699064304)
@@ -0,0 +1,5 @@
+package lesson7;
+
+public class Pen extends Product{ // extends - подтип, типо копирует всё из Product. Перевести как "является ли?" "А ручка является ли продуктом?"
+//если есть два типа разных (Допустим лошадь и стул) - сделать один общий, и под каждый свой
+}
